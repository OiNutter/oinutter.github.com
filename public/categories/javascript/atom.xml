<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | OiNutter.co.uk]]></title>
  <link href="http://oinutter.co.uk/categories/javascript/atom.xml" rel="self"/>
  <link href="http://oinutter.co.uk/"/>
  <updated>2011-12-09T09:55:42+00:00</updated>
  <id>http://oinutter.co.uk/</id>
  <author>
    <name><![CDATA[Will McKenzie]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Obscura - Canvas, CoffeeScript and Micro Frameworks]]></title>
    <link href="http://oinutter.co.uk/2011/06/10/obscura-canvas-coffeescript-and-micro-frameworks/"/>
    <updated>2011-06-10T00:00:00+01:00</updated>
    <id>http://oinutter.co.uk/2011/06/10/obscura-canvas-coffeescript-and-micro-frameworks</id>
    <content type="html"><![CDATA[<p>It's been a busy few months so I'm a bit behind on my posting so hopefully I can get back on schedule now. Once again I've been working on another javascript
library, this time a canvas based image manipulation library called Obscura.</p>

<p>t all started with the arrival on the scene of <a href="http://microjs.com">microjs.com</a> by <a href="http://mir.aculo.us">Thomas Fuchs</a> and <a href="http://dustindiaz.com/">Dustin Diaz</a>.
For those of you who haven't heard of it, <a href="http://microjs.com">microjs.com</a> is an index of micro frameworks curated by Thomas and Dustin. The requirements for
inclusion on the site are as follows:</p>

<ul>
<li>Must be written in javascript</li>
<li>Must be less than 5k minified and gzipped</li>
<li>Must be focused on one thing, rather than being a library of all trades</li>
<li>Must have no dependencies</li>
</ul>


<p>I liked the idea of this and was keen to get a listing on there as a step towards my goal of becoming more known in the community. Unfortunately none of my
previous projects met the requirements, so if I wanted in I needed to come up with something else. I'd seen a tutorial in .Net magazine on image editing using
javascript and canvas and decided I could port my existing PHP ImageHandler class to javascript using canvas as a base.</p>

<p>I also decided to use this as an oppurtunity to try out <a href="http://jashkenas.github.com/coffee-script/">CoffeeScript</a> which I've been hearing a lot about. Once
again, for those out of the loop, CoffeeScript is a lot like <a href="http://sass-lang.com">Sass</a>, which I've mentioned previously, but for Javascript. It's a language
that compiles to javascript, so you can write your code in CoffeeScript's clearer, more verbose syntax, then compile it to normal working syntax.</p>

<p>I'm not normally a fan of stuff like this as I've never really seen the point, if you want to write javascript just learn javascript. However both Sass and
CoffeeScript have convinced me that there are benefits to these things. In the case of CoffeeScript the automatic handling of things like scope and variable
declaration make developing a lot easier and safer. The automatic wrapping in a function did cause me some confusion at first, which I'll discuss later, but does
prevent any unnecessary pollution of the global scope and can be turned off with a compile option. I am however still adjusting to the braceless syntax which I'm
not too keen on. I appreciate that it makes the code cleaner and smaller but as a php developer predominantly I've grown used to curly braces or at the very least
some kind of ruby-esque closing statement.</p>

<p>I decided to stick with a small selection of basic image manipulation functions to start with. As I was using my existing PHP library as a starting point I had a
ready supplied list of functions to use, with the basic logic all worked out. All I needed to do was work out how to write the functions in CoffeeScript and
understand how to apply them with canvas. The latter proved to be the more challenging task for the most part. Particularly due to the inconsistencies in how the
W3C's canvas spec is implemented in Gecko and Webkit. The main issue I came across was when working on the rotate function. I had been using the
globalCompositeMethod copy to overwrite the existing canvas data which worked fine in Firefox but in Safari and Chrome "copy" actually overlays the new data onto
the old, so the original, unrotated image was still visible. I ended up having to create an internal canvas object as a kind of staging area so all manipulations
were performed on that before the finished article was sent to the target canvas.</p>

<p>By far my favourite CoffeeScript feature when writing this was the way it handles scope and the ability to reference the parent object easily when writing the
code made life considerably easier, particularly as all the functions perform operations on internal objects. For any of you who haven't played with CoffeeScript
yet or aren't familiar with the scope handling, it works like this:</p>

<p><div><script src='https://gist.github.com/1084753.js?file=example.coffee'></script>
<noscript><pre><code>object -&gt;
    @prop = 'foo'
    @bar = (newProp) =&gt;
    	@prop = newProp</code></pre></noscript></div>
</p>

<p>Which will compile to this</p>

<p><div><script src='https://gist.github.com/1084753.js?file=compiled.js'></script>
<noscript><pre><code>(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };
  object(function() {
    this.prop = 'foo';
    return this.bar = __bind(function(newProp) {
      return this.prop = newProp;
    }, this);
  });
}).call(this);</code></pre></noscript></div>
</p>

<p>Notice that CoffeeScript adds the __bind function which is then used to make sure the function executes in the object scope. Granted you can write this yourself
but the syntax of the CoffeeScript is a lot simpler and clearer as to what is going on.</p>

<p>After a few weeks of playing around I got Obscura into a state I was happy with for a first version release. It passed all the tests for inclusion on
<a href="http://microjs.com">microjs.com</a>, coming in at 1.5K compressed and gzipped, so I submitted it for inclusion and got it accepted. Obviously I was pretty pleased
about this as it was one of the main reasons for writing the library in the first place and it was great that my work was considered good enough to be accepted
onto the site but it didn't stop there. Later in the same week I got an email from <a href="http://softpedia.com/">Softpedia</a> informing me that one of my projects had
been added to their Scripts section. At first I had no idea what they were talking about as I hadn't submitted anything to Softpedia.Upon further investigation it
would appear that they've been scanning other websites and finding libraries and widgets to add to their new Scripts download section. The project they'd added
was Obscura so what I'm guessing has happened is they've been scanning through microjs.com and adding projects from there. It also appears they've been using
those projects as starting points to find other projects as throughout the day I got more emails telling me they'd added other projects that are on my blog and
github account. By the end of it 7 of my projects had been added; <a href="http://github.com/OiNutter/Obscura/">Obscura</a>, <a href="http://github.com/OiNutter/uncharted/">Uncharted</a>,
<a href="http://github.com/OiNutter/zebedee">Zebedee</a>, <a href="http://github.com/OiNutter/ermintrude">ermintrude</a>, <a href="http://github.com/OiNutter/Easel">Easel</a>,
<a href="http://github.com/OiNutter/tipBox">tipBox</a> and <a href="http://github.com/OiNutter/delorean">Delorean</a>. For me this was a huge breakthrough in terms of what I've been
trying to achieve this year as it's providing more avenues for people to find out about my work and hopefully use it and help improve it. It's also resulted in
people starting to watch my GitHub repositories so hopefully I can build on this and keep raising my profile as the year goes on.</p>

<p>For now feel free to check out Obscura on GitHub for the code and demos</p>

<p><a href="http://github.com/OiNutter/Obscura">Obscura</a> | <a href="http://oinutter.github.com/Obscura">Demos</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tool tips, javascript animations and coding without a net]]></title>
    <link href="http://oinutter.co.uk/2011/03/28/tool-tips-javascript-animations-and-coding-without-a-net/"/>
    <updated>2011-03-28T00:00:00+01:00</updated>
    <id>http://oinutter.co.uk/2011/03/28/tool-tips-javascript-animations-and-coding-without-a-net</id>
    <content type="html"><![CDATA[<p>I've been working on overhauling the UI experience in the back end systems we use at work and decided that I wanted some tool tips to help tell users what things
do without them having to ask us. The only decent tool tip library I've ever found was <a href="http://www.nickstakenburg.com/projects/prototip/">Prototip</a> by Nick
Stakenburg but I knew I wouldn't be able to get away with buying a license for it so I needed to create my own. After my experiences doing the emile.js version of
zebedee I decided to give myself a bit of a challenge and go completely frameworkless to create a standalone widget.</p>

<p>First up was finding out how to do encapsulation in javascript so that I was only giving access to the methods that needed to be accessible from outside the class.
The way this is done is to return an object with the public methods defined in it, rather than doing return this. For purposes of scope I defined the methods
before the return statement, then returned references to them. Like so:</p>

<p><div><script src='https://gist.github.com/1173224.js?file='></script>
<noscript><pre><code>var toolTip = function(){
    var _privateProp = 'foo',
         _privateMethod = function(){
             return 'bar';
         },
         publicMethod = function(){
             return _privateProp + _privateMethod();
         };
 
    return {
        publicMethod:publicMethod
    }
 
}</code></pre></noscript></div>
</p>

<p>Once I had that that figured out it was down to creating the various methods and setting up the event listeners. The main requirement was handling the
positioning of the tool tip in relation to it's trigger element. As the position could either be fixed to a point on the trigger or follow the mouse, I ended up
creating an object with either the element properties or the mouse coordinates and using that as the starting reference to perform the calculations from, then
scanned the position option for one of the y position possibilities and set the top and did the same for the x position options. I later expanded this to have an
optional element passed through which would be positioned instead of the tooltip, for use with the animations.</p>

<p>I spent a lot of time going through <a href="http://prototypejs.org">prototype</a> and <a href="http://zeptojs.com">zepto</a> to find out how to do the various things I needed to do
without the frameworks and ended up stealing various little bits of code, like the user agent regular expressions from zepto so I could determine whether the
browser was running webkit, I also tweaked this to check for gecko 2 as well. This was so I could use css animations where available for the transitions. When it
came to dealing with the animation, <a href="http://github.com/madrobby/emile">emile.js</a> ended up being my main source of reference, to the point that when I needed to
expand my original animation function to be more flexible I ended up taking emile's animation code and a few of it's helpers and tweaking them for my own purposes.</p>

<p>The biggest challenge with doing the animation was the scale transition and positioning it, particularly the css animations. With the javascript animation it was
easy to make the box appear to grow and shrink from it's trigger element, as I just needed to call the position method each time I adjusted the size. But with the
css couldn't call anything on each iteration so I had to create a test element that was a clone of the tool tip, alter that, reposition it and get the end values,
to then pass through to the animation function. In the end it worked out but I'd like to play around with it to see if I can get something less long winded. I also
want to have a play to see if it's possible to make the text grow and shrink with the box, by using ems. Another interesting thing I discovered while working on the
CSS transitions is that both Gecko 2 and Webkit have their own version of the transition end event, in Gecko 2 you can use transitionend but in webkit you need to
call webkitTransitionEnd. Also this event will get called for each property you are animation, so in the case of the scale transition,where I was animating width,
height,left and top, the event was being called four times. Remember to check for this when writing your handlers.</p>

<p>I ended up namespacing the tool tip function inside a tipBox object, so I could add the scan method and keep them together. This means that while the calls are a
bit longer, the functions are kept neat and secure, and shouldn't conflict with anything.</p>

<p>The scan method enables you to have a load of elements on a page (preferably a tags for semantic reasons) with a given class name that you can turn into tipBox
triggers with one function call. All you need to do is pass the class name and the options you want to use to the method and it will scan the page and set up the
tipBox for each one, using the title attribute to supply the text.</p>

<p>I found getting the initial stages of the widget working were a lot easier than I expected, which I take to be a good sign that my understanding and knowledge are
improving (either that or it's easier than I thought and I'm just being a numpty). The animations presented my biggest challenge and took as much time to work
round as everything else did to create but were without a doubt the most rewarding part of it to complete. The whole coding without a net approach forced me to
explore and learn more, and work out my own solutions to how to do things, which was great fun, and will hopefully result in an improvement in my javascript work
from now on.</p>

<p>Code and demos are available on GitHub:</p>

<p><a href="https://github.com/OiNutter/tipBox">tipBox</a> | <a href="http://oinutter.github.com/tipBox/">Demos</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zebedee - v0.2 - A whole lot of frameworks]]></title>
    <link href="http://oinutter.co.uk/2011/03/04/zebedee-v0-2-a-whole-lot-of-frameworks/"/>
    <updated>2011-03-04T00:00:00+00:00</updated>
    <id>http://oinutter.co.uk/2011/03/04/zebedee-v0-2-a-whole-lot-of-frameworks</id>
    <content type="html"><![CDATA[<p>Ok, there's only 3 more but still, it sounds more exciting. Yes, zebedee has made it to version 0.2, my first actual version increment on any of my projects, I
feel quite proud! So what's new in version 0.2? Well the main additions are the versions for <a href="http://script.aculo.us">Scriptaculous</a>,
<a href="http://scripty2.com">Scripty2</a> and <a href="https://github.com/madrobby/emile">emile.js</a> Check out the readme for details on what files are needed and how to use them. 
In addition there are also a few bug tweaks, minor reworking of the zepto version to cope with a major restructuring of zepto and the addition of a default panel
option.</p>

<p>For the large part I've kept the code the same on the new versions, the main changes being updating the open and close methods to use each individual library. 
I've also removed functions that were duplications of methods available now available to me in Prototype for the Scriptaculous and Scripty 2 versions.  I did
however keep my own object merge function as it merges more recursively than Prototypes version.  Emile however was much more of a challenge as it is solely an
animation framework and therefore contains no helper methods whatsoever.  Cue a trip deep into zepto's code and the
<a href="https://developer.mozilla.org/en-US/docs">Mozilla Javascript Docs</a> to find out how the frameworks do things. I ended up adding a few helper methods to deal with
manipulating the classnames, just to make life easier.</p>

<p>I've also added in the facility for the Scripty 2 version to use Scripty 2's ability to use css transitions where available. This is only available on linear and
sinusoidal transitions at the moment but the library will fallback to javascript for the unavailable transitions. In the case of emile the transition calculation
functions have to be provided as an option so I've added a zebedeeTransition object with a selection of functions.  The default object just includes the linear
and sinusoidal transitions but by including the zeb-transitions.js file you can get access to all the transition types of Scripty 2.  The calculations are taken
from Scripty 2's included calculations that are based on Robert Penner's original AS2 <a href="http://www.robertpenner.com/easing/">easing equations</a>.</p>

<p>Coming up in version 0.3 will be a jQuery version, callbacks for when the panel opens and closes, at both the start and finish of the animation, and the option to
keep one panel open at all times.</p>

<p><a href="https://github.com/OiNutter/zebedee">Zebedee</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zebedee - A Multi Framework Accordion Widget]]></title>
    <link href="http://oinutter.co.uk/2011/02/14/zebedee-a-multi-framework-accordion-widget/"/>
    <updated>2011-02-14T00:00:00+00:00</updated>
    <id>http://oinutter.co.uk/2011/02/14/zebedee-a-multi-framework-accordion-widget</id>
    <content type="html"><![CDATA[<p>Zebedee is an accordion widget for multiple frameworks. At the moment it is only at V0.1, which only supports <a href="http://zeptojs.com">zepto.js</a>, but I will be adding
support for various different animation frameworks as I have time. I wanted to play around with Zepto, <a href="http://mir.aculo.us">Thomas Fuchs</a>\' new mobile javascript
framework and decided it would be fun to do an accordion widget to see if I could use the CSS3 transitions to animate the opening and closing of the accordion
sections.</p>

<p>It was good fun having to go back to basics on it as I was used to having Prototype and Class.Create() to work with when creating new objects. Thankfully zepto
provided a few good utility functions to keep my code neat and simple. The jQuery like chaining also came in handy in that regard.</p>

<p>I've purposefully kept the functionality simple, as I don't really think it needs to be all singing, all dancing! At the moment it supports vertical and
horizontal accordions and I will probably be adding the ability to set the the actual trigger event for the accordion to be bound to a child of the header object.
Also the duration, transition type and trigger event are all configurable, as well as the class names assigned to the various components.</p>

<p>I should hopefully be adding support for Scriptaculous in the next month or so, and Scripty 2 should follow soon after that, so watch this space. In the meantime
checkout the project page at the link below for more information and links to the GitHub source. I'll also be popping up some demo pages when I get the chance.</p>

<p><a href="https://github.com/OiNutter/zebedee">Zebedee</a> | <a href="http://oinutter.github.com/zebedee">Demos</a></p>
]]></content>
  </entry>
  
</feed>
