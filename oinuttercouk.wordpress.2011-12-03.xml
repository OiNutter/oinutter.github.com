<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.2.1" created="2011-12-03 11:46" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.1/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.1/"
>

<channel>
	<title>OiNutter.co.uk</title>
	<link>http://www.oinutter.co.uk</link>
	<description>What semi-colon?</description>
	<pubDate>Sat, 03 Dec 2011 11:46:03 +0000</pubDate>
	<language>en</language>
	<wp:wxr_version>1.1</wp:wxr_version>
	<wp:base_site_url>http://www.oinutter.co.uk</wp:base_site_url>
	<wp:base_blog_url>http://www.oinutter.co.uk</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>will</wp:author_login><wp:author_email>willmckenzie@oinutter.co.uk</wp:author_email><wp:author_display_name><![CDATA[will]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>6</wp:term_id><wp:category_nicename>coding</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Coding]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>43</wp:term_id><wp:category_nicename>coffeescript-coding</wp:category_nicename><wp:category_parent>coding</wp:category_parent><wp:cat_name><![CDATA[CoffeeScript]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>45</wp:term_id><wp:category_nicename>development</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Development]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>55</wp:term_id><wp:category_nicename>gems</wp:category_nicename><wp:category_parent>development</wp:category_parent><wp:cat_name><![CDATA[Gems]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>46</wp:term_id><wp:category_nicename>ios</wp:category_nicename><wp:category_parent>development</wp:category_parent><wp:cat_name><![CDATA[iOS]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>8</wp:term_id><wp:category_nicename>javascript</wp:category_nicename><wp:category_parent>coding</wp:category_parent><wp:cat_name><![CDATA[Javascript]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>44</wp:term_id><wp:category_nicename>objective-c</wp:category_nicename><wp:category_parent>coding</wp:category_parent><wp:cat_name><![CDATA[Objective-C]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>28</wp:term_id><wp:category_nicename>python-2</wp:category_nicename><wp:category_parent>coding</wp:category_parent><wp:cat_name><![CDATA[Python]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>54</wp:term_id><wp:category_nicename>ruby</wp:category_nicename><wp:category_parent>coding</wp:category_parent><wp:cat_name><![CDATA[Ruby]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>1</wp:term_id><wp:category_nicename>uncategorized</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>7</wp:term_id><wp:category_nicename>actionscript</wp:category_nicename><wp:category_parent>coding</wp:category_parent><wp:cat_name><![CDATA[Actionscript]]></wp:cat_name></wp:category>
	<wp:tag><wp:term_id>12</wp:term_id><wp:tag_slug>accordion</wp:tag_slug><wp:tag_name><![CDATA[accordion]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>7</wp:term_id><wp:tag_slug>actionscript</wp:tag_slug><wp:tag_name><![CDATA[Actionscript]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>30</wp:term_id><wp:tag_slug>animation</wp:tag_slug><wp:tag_name><![CDATA[animation]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>50</wp:term_id><wp:tag_slug>applications</wp:tag_slug><wp:tag_name><![CDATA[applications]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>17</wp:term_id><wp:tag_slug>as3</wp:tag_slug><wp:tag_name><![CDATA[AS3]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>38</wp:term_id><wp:tag_slug>canvas</wp:tag_slug><wp:tag_name><![CDATA[Canvas]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>40</wp:term_id><wp:tag_slug>coffee-script</wp:tag_slug><wp:tag_name><![CDATA[coffee-script]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>39</wp:term_id><wp:tag_slug>coffeescript</wp:tag_slug><wp:tag_name><![CDATA[coffeescript]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>19</wp:term_id><wp:tag_slug>color</wp:tag_slug><wp:tag_name><![CDATA[color]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>18</wp:term_id><wp:tag_slug>colour</wp:tag_slug><wp:tag_name><![CDATA[colour]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>15</wp:term_id><wp:tag_slug>css3</wp:tag_slug><wp:tag_name><![CDATA[css3]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>52</wp:term_id><wp:tag_slug>documentation</wp:tag_slug><wp:tag_name><![CDATA[Documentation]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>35</wp:term_id><wp:tag_slug>emile</wp:tag_slug><wp:tag_name><![CDATA[emile]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>37</wp:term_id><wp:tag_slug>encapsulation</wp:tag_slug><wp:tag_name><![CDATA[encapsulation]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>51</wp:term_id><wp:tag_slug>examples</wp:tag_slug><wp:tag_name><![CDATA[Examples]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>25</wp:term_id><wp:tag_slug>file</wp:tag_slug><wp:tag_name><![CDATA[file]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>32</wp:term_id><wp:tag_slug>framework</wp:tag_slug><wp:tag_name><![CDATA[framework]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>57</wp:term_id><wp:tag_slug>gems-2</wp:tag_slug><wp:tag_name><![CDATA[gems]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>27</wp:term_id><wp:tag_slug>gui</wp:tag_slug><wp:tag_name><![CDATA[gui]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>21</wp:term_id><wp:tag_slug>hsl</wp:tag_slug><wp:tag_name><![CDATA[HSL]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>42</wp:term_id><wp:tag_slug>image-manipulation</wp:tag_slug><wp:tag_name><![CDATA[image manipulation]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>46</wp:term_id><wp:tag_slug>ios</wp:tag_slug><wp:tag_name><![CDATA[iOS]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>48</wp:term_id><wp:tag_slug>ipad</wp:tag_slug><wp:tag_name><![CDATA[iPad]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>47</wp:term_id><wp:tag_slug>iphone</wp:tag_slug><wp:tag_name><![CDATA[iPhone]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>9</wp:term_id><wp:tag_slug>javascript-2</wp:tag_slug><wp:tag_name><![CDATA[javascript]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>10</wp:term_id><wp:tag_slug>js</wp:tag_slug><wp:tag_name><![CDATA[js]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>60</wp:term_id><wp:tag_slug>json</wp:tag_slug><wp:tag_name><![CDATA[json]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>41</wp:term_id><wp:tag_slug>micro-frameworks</wp:tag_slug><wp:tag_name><![CDATA[micro frameworks]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>14</wp:term_id><wp:tag_slug>mobile</wp:tag_slug><wp:tag_name><![CDATA[mobile]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>44</wp:term_id><wp:tag_slug>objective-c</wp:tag_slug><wp:tag_name><![CDATA[Objective-C]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>24</wp:term_id><wp:tag_slug>pyqt4</wp:tag_slug><wp:tag_name><![CDATA[pyqt4]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>23</wp:term_id><wp:tag_slug>python</wp:tag_slug><wp:tag_name><![CDATA[python]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>53</wp:term_id><wp:tag_slug>readme</wp:tag_slug><wp:tag_name><![CDATA[README]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>63</wp:term_id><wp:tag_slug>regular-expressions</wp:tag_slug><wp:tag_name><![CDATA[regular expressions]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>26</wp:term_id><wp:tag_slug>renaming</wp:tag_slug><wp:tag_name><![CDATA[renaming]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>22</wp:term_id><wp:tag_slug>rgb</wp:tag_slug><wp:tag_name><![CDATA[RGB]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>56</wp:term_id><wp:tag_slug>ruby-2</wp:tag_slug><wp:tag_name><![CDATA[ruby]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>20</wp:term_id><wp:tag_slug>sass</wp:tag_slug><wp:tag_name><![CDATA[Sass]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>34</wp:term_id><wp:tag_slug>scriptaculous</wp:tag_slug><wp:tag_name><![CDATA[scriptaculous]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>33</wp:term_id><wp:tag_slug>scripty2</wp:tag_slug><wp:tag_name><![CDATA[scripty2]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>58</wp:term_id><wp:tag_slug>skeleton</wp:tag_slug><wp:tag_name><![CDATA[skeleton]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>62</wp:term_id><wp:tag_slug>templates</wp:tag_slug><wp:tag_name><![CDATA[templates]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>36</wp:term_id><wp:tag_slug>tool-tips</wp:tag_slug><wp:tag_name><![CDATA[tool tips]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>61</wp:term_id><wp:tag_slug>validation</wp:tag_slug><wp:tag_name><![CDATA[validation]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>16</wp:term_id><wp:tag_slug>webkit</wp:tag_slug><wp:tag_name><![CDATA[webkit]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>13</wp:term_id><wp:tag_slug>widget</wp:tag_slug><wp:tag_name><![CDATA[widget]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>49</wp:term_id><wp:tag_slug>xcode</wp:tag_slug><wp:tag_name><![CDATA[xCode]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>59</wp:term_id><wp:tag_slug>yaml</wp:tag_slug><wp:tag_name><![CDATA[yaml]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>31</wp:term_id><wp:tag_slug>zebedee</wp:tag_slug><wp:tag_name><![CDATA[zebedee]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>11</wp:term_id><wp:tag_slug>zepto</wp:tag_slug><wp:tag_name><![CDATA[zepto]]></wp:tag_name></wp:tag>

	<generator>http://wordpress.org/?v=3.2.1</generator>

	<item>
		<title>About</title>
		<link>http://www.oinutter.co.uk/about/</link>
		<pubDate>Sat, 04 Sep 2010 15:17:09 +0000</pubDate>
		<dc:creator>will</dc:creator>
		<guid isPermaLink="false">http://www.oinutter.co.uk/blog/?page_id=2</guid>
		<description></description>
		<content:encoded><![CDATA[About Me? Hmm... Not much to tell really.  My name is Will McKenzie and I'm a Web Developer working in Newcastle Upon Tyne, UK.  I develop using mainly PHP and MySQL, and I've been getting more into Javascript of late.  I'm also trying to find oppurtunity to have a play round with Ruby on Rails and some mobile app development on Android. (I can't afford to develop for iPhone yet!!).

This blog is basically part of my efforts to up my game and participate in this huge community of coders that we have trying to push the boundaries of what's possible on the web and beyond.  I'm going to be posting about some of my personal, open-source  projects and the lesson I learn from trying out new stuff and figuring out problems.  My hope is that by doing this I'll be able to help other people going through the same problems, and that maybe when I need it there'll be people able to help me.

In my spare time I'm into Martial Arts, with Capoeira being my main activity, Video Games, and Music (Playing and Listening).  So I may stick something up about them every now and again.

Well thats enough rambling from me, time to start thinking of something interesting to post.

Enjoy

Will]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date>2010-09-04 15:17:09</wp:post_date>
		<wp:post_date_gmt>2010-09-04 15:17:09</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>about</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>related_title</wp:meta_key>
			<wp:meta_value><![CDATA[Related posts]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Projects</title>
		<link>http://www.oinutter.co.uk/projects/</link>
		<pubDate>Sun, 05 Sep 2010 12:35:38 +0000</pubDate>
		<dc:creator>will</dc:creator>
		<guid isPermaLink="false">http://www.oinutter.co.uk/blog/?page_id=5</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Ok, so here is where you'll find info and links to any of the open-source stuff I've been working on.</p>
<ul>
<li><a title="Easel" href="http://www.oinutter.co.uk/projects/easel/">Easel</a> - An As3 colour manipulation library</li>
<li><a title="Ermintrude" href="http://www.oinutter.co.uk/projects/ermintrude/">Ermintrude</a> - A javascript carousel script</li>
<li><a title="Grayskull" href="http://www.oinutter.co.uk/projects/grayskull/">Grayskull</a> - A ruby gem for validating data files</li>
<li><a title="Obscura" href="http://www.oinutter.co.uk/projects/obscura/">Obscura</a> - A javascript and canvas image manipulation library</li>
<li><a title="Skeletor" href="http://www.oinutter.co.uk/projects/skeletor/">Skeletor</a> - A ruby gem for generating project skeletons</li>
<li><a title="tipBox" href="http://www.oinutter.co.uk/projects/tipbox/">tipBox</a> - A standalone javascript tool tip widget.</li>
<li><a title="Uncharted" href="http://www.oinutter.co.uk/projects/uncharted/">Uncharted </a>- A charting library built using Javascript and SVG</li>
<li><a title="Zebedee" href="http://www.oinutter.co.uk/projects/zebedee/">Zebedee</a> - A multi-framework accordion widget</li>
</ul>
<p>Most of my javscript stuff at the moment uses Prototype and Scriptaculous.  I started off using MooTools but much prefer the Ajax Request stuff in Prototype.  Also what research I've done has led me to believe that while jQuery is excellent for DOM manipulation, it falls short on the request side of things (Please note this is based on reading articles not actually physically testing).  I do intend to have a play around with jQuery just to help broaden my knowledge and understanding but I prefer to use the same library for everything where possible and Prototype and Scriptaculous together suit all my needs pretty well.  Zebedee is the obvious exception to this as I intend to do versions for as many animation frameworks as I can.</p>
<p>I've also now got Easel representing my actionscript work.  This will probably be a small part of what I post on here as Flash is a lot less regular part of my work but whenever I have something worth sharing I'll pop it up here, either as a project or a post.</p>
<p>There's even a couple of Ruby gems, Skeletor and Grayskull, up there just to increase the variation a bit.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5</wp:post_id>
		<wp:post_date>2010-09-05 12:35:38</wp:post_date>
		<wp:post_date_gmt>2010-09-05 12:35:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>projects</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>related_title</wp:meta_key>
			<wp:meta_value><![CDATA[Related posts]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_tweet_this</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_clig</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_bitly</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_wp</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_yourls</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_wp_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ermintrude</title>
		<link>http://www.oinutter.co.uk/projects/ermintrude/</link>
		<pubDate>Sun, 05 Sep 2010 12:35:59 +0000</pubDate>
		<dc:creator>will</dc:creator>
		<guid isPermaLink="false">http://www.oinutter.co.uk/blog/?page_id=7</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Ermintrude is a Prototype + Scriptaculous based carousel script.  It started out as a port of Fred LeBlanc's excellent <a title="FredHQ: Roundabout for jQuery" href="http://fredhq.com/projects/roundabout/" target="_self">Roundabout for jQuery</a> to Scriptaculous so I could use it with my work without having to change the library I use and relearn how to do stuff.</p>
<p>Also, it was a good learning exercise in that I had to go through someone elses code and make sense of it, in the process learning a bit about the jQuery style of doing things.  I reworked a few things to suit how I'm used to dealing with classes in Prototype but mainly the code was the same.  However once I'd finished porting it over I decided that I could probably build on it to add more functionality that I felt would be useful.  There were also bits that I thought could possibly be refined or simplified using methods available to me through Prototype.</p>
<p>At the moment it's not much different as I haven't had chance to sit down and get stuck into it, being a relatively recent project.  One of the things I'd like to do is a built in timer method to make it run automatically and maybe have a go at creating some new shapes.  Will kinda see how things go.  The first thing I did on deciding to move it on from being a straight port was to rename it, to distinguish it from the original.  In case you're wondering why Ermintrude well...</p>
<p><a href="http://en.wikipedia.org/wiki/The_Magic_Roundabout"><img class="size-medium wp-image-18 alignnone" title="ermintrude" src="http://www.oinutter.co.uk/wp-content/uploads/2010/09/ermintrude-300x216.jpg" alt="Ermintrude from the Magic Roundabout" /></a></p>
<p>As with all my open source stuff the repository is publicly available on GitHub.  I've got a couple of Demo pages up at the moment but they are pretty basic and are just what I use for testing.  Will get some prettier ones set up some time soon.</p>
<p><a title="GitHub" href="http://github.com/OiNutter/ermintrude" target="_self">Check out the source on GitHub</a> | <a title="Ermintrude Demos" href="http://oinutter.github.com/ermintrude/" target="_blank">Demos</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7</wp:post_id>
		<wp:post_date>2010-09-05 12:35:59</wp:post_date>
		<wp:post_date_gmt>2010-09-05 12:35:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ermintrude</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>5</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>related_title</wp:meta_key>
			<wp:meta_value><![CDATA[Related posts]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_tweet_this</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_bitly</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_clig</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_wp</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_yourls</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_wp_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Uncharted</title>
		<link>http://www.oinutter.co.uk/projects/uncharted/</link>
		<pubDate>Sun, 05 Sep 2010 12:36:28 +0000</pubDate>
		<dc:creator>will</dc:creator>
		<guid isPermaLink="false">http://www.oinutter.co.uk/blog/?page_id=10</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Uncharted is a charting library built using Prototype and SVG.  I'm using the excellent <a title="Raphael SVG Library" href="http://raphaeljs.com" target="_self">Raphaël</a> library by Dmitry Baranovskiy to handle the SVG side of things. If you wanting to use SVG in a project I would absolutely recommend checking this out. It works cross browser, switching to VML for Internet Explorer, is straightfoward to use and easily extensible.</p>
<p>Uncharted is a mixture of features I liked from both <a title="Protochart Library" href="http://www.deensoft.com/lab/protochart/" target="_self">Protochart</a> and <a title="gRaphael Charting Library" href="http://g.raphaeljs.com/" target="_self">gRaphaël</a>.  Basically I liked the functionality and interactivity of the gRaphaël stuff, as well as the ease of cross browser implementation, but the Protochart stuff looked a lot better and I felt was more straightforward to use.</p>
<p>The whole project has been a huge learning exercise for me, both in Javascript and SVG, which I'd never used before.  Rather than simply tweaking one of the two existing libraries I decided to write mine from the ground up, structuring it in the style I've become familiar with from the Prototype and Scriptaculous stuff.  I've tried to make it as straightforward as possible to use and configure, only making the things I felt needed to be alterable available as configurable options.</p>
<p>As I've been going through I've obviously spent a lot of time looking through the code for both ProtoChart and gRaphaël learning how they achieved various bits of functionality.  I've taken a lot of the look and feel of the charts from ProtoChart but added in some of the interactivity from gRaphaël, as well as adding in my own ideas.  One of the biggest headaches for me was trying to make the axis automatically adjust, which I got a lot of help from the ProtoChart code for.</p>
<p>Currently I have implemented Pie,Line,Time and Bar charts but will be looking to add more chart types such as Dot and Area as I get chance.  It's very much a work in progress so obviously there are bugs and issues with it.  At present the only oppurtunity I have to use it is in my day job so the only bugs I spot are the ones that are thrown up through that but if any of you find anything feel free to either open an issue on git hub or check out the code yourself, see what's wrong and send me a patch.</p>
<p>Source is on GitHub and demos are available at the link below.</p>
<p><a title="GitHub" href="http://github.com/OiNutter/uncharted" target="_self">Check out the source on GitHub</a> | <a title="Uncharted Demos" href="http://oinutter.github.com/uncharted/" target="_blank">Demos</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>10</wp:post_id>
		<wp:post_date>2010-09-05 12:36:28</wp:post_date>
		<wp:post_date_gmt>2010-09-05 12:36:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>uncharted</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>5</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>related_title</wp:meta_key>
			<wp:meta_value><![CDATA[Related posts]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_tweet_this</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_clig</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_bitly</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_wp</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_yourls</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_wp_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>94</wp:comment_id>
			<wp:comment_author><![CDATA[Obscura &#8211; Canvas, CoffeeScript and Micro Frameworks | OiNutter.co.uk]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.oinutter.co.uk/2011/06/10/obscura-canvas-coffeescript-and-micro-frameworks/</wp:comment_author_url>
			<wp:comment_author_IP>193.202.110.113</wp:comment_author_IP>
			<wp:comment_date>2011-07-19 09:09:46</wp:comment_date>
			<wp:comment_date_gmt>2011-07-19 09:09:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] are on my blog and github account.  By the end of it 7 of my projects had been added; Obscura, Uncharted, Zebedee, Ermintrude, Easel, tipBox and Delorean (which I&#8217;ll add and post about soon). For me [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>ermintrude</title>
		<link>http://www.oinutter.co.uk/projects/ermintrude/ermintrude-2/</link>
		<pubDate>Mon, 06 Sep 2010 21:29:41 +0000</pubDate>
		<dc:creator>will</dc:creator>
		<guid isPermaLink="false">http://www.oinutter.co.uk/blog/wp-content/uploads/2010/09/ermintrude.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Ermintrude from the Magic Roundabout]]></excerpt:encoded>
		<wp:post_id>18</wp:post_id>
		<wp:post_date>2010-09-06 21:29:41</wp:post_date>
		<wp:post_date_gmt>2010-09-06 21:29:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ermintrude-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>7</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.oinutter.co.uk/wp-content/uploads/2010/09/ermintrude.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/09/ermintrude.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"350";s:6:"height";s:3:"252";s:14:"hwstring_small";s:23:"height='92' width='128'";s:4:"file";s:22:"2010/09/ermintrude.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:22:"ermintrude-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:22:"ermintrude-300x216.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"216";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[Ermintrude from the Magic Roundabout]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>New Year&#039;s Resolutions</title>
		<link>http://www.oinutter.co.uk/2011/01/08/new-years-resolutions/</link>
		<pubDate>Sat, 08 Jan 2011 19:00:21 +0000</pubDate>
		<dc:creator>will</dc:creator>
		<guid isPermaLink="false">http://www.oinutter.co.uk/blog/?p=27</guid>
		<description></description>
		<content:encoded><![CDATA[Ok, so one of my goals for this year is to really start getting involved more in the coding community.  That is the whole intention of this blog, to try and share my learning experiences and provide a home for the various projects I'm working on in my own time in the hope that other people will find them useful.  There is also the hope that more knowledgeable and more skilled folk than myself might catch wind and offer advice and help to myself.

In actual fact this goal was something I set myself towards the end of last year, which is when I first started setting up this blog, but I never seemed to find time to actually kick it off.  I guess that's what New Year's resolutions are all about, making you take that step.  So here goes, the blog is now officially live, and you are now, hopefully, reading the inaugural post.

I'm going to try and post as often as possible on here, probably monthly at the moment until I find enough to write about more often.  I'll also be gradually adding pages and links for my various open source playground projects, so I'll undoubtedly be posting to launch them and keep you all updated on their progress.

Here's to 2011

Will]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>27</wp:post_id>
		<wp:post_date>2011-01-08 19:00:21</wp:post_date>
		<wp:post_date_gmt>2011-01-08 19:00:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>new-years-resolutions</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[Christa Schaible]]></wp:comment_author>
			<wp:comment_author_email>Graft1346@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://joditest.com</wp:comment_author_url>
			<wp:comment_author_IP>173.234.31.192</wp:comment_author_IP>
			<wp:comment_date>2011-01-20 18:14:23</wp:comment_date>
			<wp:comment_date_gmt>2011-01-20 18:14:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Most of the times blogs are the same but i honestly enjoyed what i read. Grats !]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3</wp:comment_id>
			<wp:comment_author><![CDATA[will]]></wp:comment_author>
			<wp:comment_author_email>willmckenzie@oinutter.co.uk</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>193.35.132.4</wp:comment_author_IP>
			<wp:comment_date>2011-01-21 08:40:55</wp:comment_date>
			<wp:comment_date_gmt>2011-01-21 08:40:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks, hopefully you'll enjoy the rest!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>16</wp:comment_id>
			<wp:comment_author><![CDATA[Vasiliki Economus]]></wp:comment_author>
			<wp:comment_author_email>Youn5319@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://sylvester16berry.wikidot.com/scholarships-for-minorities-the-obama-white-house-will-help</wp:comment_author_url>
			<wp:comment_author_IP>202.28.66.115</wp:comment_author_IP>
			<wp:comment_date>2011-02-22 20:36:29</wp:comment_date>
			<wp:comment_date_gmt>2011-02-22 20:36:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Pretty nice post. I just stumbled upon your blog and wanted to say that I've really enjoyed browsing your blog posts. In any case I will be subscribing to your feed and I hope you write again soon!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>17</wp:comment_id>
			<wp:comment_author><![CDATA[Karon Larner]]></wp:comment_author>
			<wp:comment_author_email>Joiner5348@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://ianmandarin.onsugar.com/Master-Speaking-Chinese-language-First---3-reasons-Begin-Talking-12478759</wp:comment_author_url>
			<wp:comment_author_IP>173.234.26.126</wp:comment_author_IP>
			<wp:comment_date>2011-02-23 00:37:21</wp:comment_date>
			<wp:comment_date_gmt>2011-02-23 00:37:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[hi, solid web log, just I don't see how to add your website in my rss reader. Could are Assist me please?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>18</wp:comment_id>
			<wp:comment_author><![CDATA[floor sticker printing]]></wp:comment_author>
			<wp:comment_author_email>Betances333@hotmail.co.uk</wp:comment_author_email>
			<wp:comment_author_url>http://www.classicirc.net/floordecals</wp:comment_author_url>
			<wp:comment_author_IP>64.120.45.243</wp:comment_author_IP>
			<wp:comment_date>2011-02-23 12:14:41</wp:comment_date>
			<wp:comment_date_gmt>2011-02-23 12:14:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Was amused from the floor up. Will sticker around a bit more for a good read.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>20</wp:comment_id>
			<wp:comment_author><![CDATA[Jeanene Boeck]]></wp:comment_author>
			<wp:comment_author_email>Purkiss4408@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://cheilitis101.typepad.com/blog/2011/01/angular-stomatitis-treatment-your-options--1.html</wp:comment_author_url>
			<wp:comment_author_IP>173.234.73.198</wp:comment_author_IP>
			<wp:comment_date>2011-02-23 15:07:35</wp:comment_date>
			<wp:comment_date_gmt>2011-02-23 15:07:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[i think you have a nice page here... today was my first time coming here.. i just happened to discover it performing a google search. anyway, great post.. i'll be bookmarking this page for certain.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>22</wp:comment_id>
			<wp:comment_author><![CDATA[will]]></wp:comment_author>
			<wp:comment_author_email>willmckenzie@oinutter.co.uk</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>89.240.111.93</wp:comment_author_IP>
			<wp:comment_date>2011-02-23 23:19:48</wp:comment_date>
			<wp:comment_date_gmt>2011-02-23 23:19:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is clearly spam but was so awfully puntastic it had to be allowed!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>18</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>25</wp:comment_id>
			<wp:comment_author><![CDATA[Mercado de Divisas]]></wp:comment_author>
			<wp:comment_author_email>Scrape@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.mercadoforexdivisas.com</wp:comment_author_url>
			<wp:comment_author_IP>204.45.209.208</wp:comment_author_IP>
			<wp:comment_date>2011-02-24 07:26:04</wp:comment_date>
			<wp:comment_date_gmt>2011-02-24 07:26:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I am not sure where you're getting your information, but great topic. I needs to spend some time learning more or understanding more. Thanks for excellent info I was looking for this information for my mission.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>33</wp:comment_id>
			<wp:comment_author><![CDATA[Annika Polaski]]></wp:comment_author>
			<wp:comment_author_email>Zimmerly2055@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.blurty.com/users/brucespells94</wp:comment_author_url>
			<wp:comment_author_IP>173.234.26.126</wp:comment_author_IP>
			<wp:comment_date>2011-02-25 19:01:12</wp:comment_date>
			<wp:comment_date_gmt>2011-02-25 19:01:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[i think you have a nice page here... these days was my initial time coming here.. i just happened to discover it performing a google search. anyway, fantastic post.. i'll be bookmarking this page for sure.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Customising Flash UI Components</title>
		<link>http://www.oinutter.co.uk/?p=36</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>will</dc:creator>
		<guid isPermaLink="false">http://www.oinutter.co.uk/?p=36</guid>
		<description></description>
		<content:encoded><![CDATA[Typically, no sooner do I start writing a programming blog with an intention to focus on Javascript and I spend all month working in Flash.  That being said, this is a programming blog and I intended to talk about Actionscript stuff as well.  One of the biggest headaches I've had this month is dealing with Flash UI components, predominantly the form components.  In actuality I've had this headache every time I've had to deal with them, but now I feel like I'm starting to get a handle on the best way to deal with them.  So lets get into it.
<h3>The Headache</h3>
On the surface of things, Flash UI Components are a great thing.  They are little bits of prewritten functionality that you can just drop into your movie and, with out too much fiddling, have a working widget.  Which is fine, as long as you just want them to act and look how Adobe have designed them. If you don't, which is pretty likely if, like me, you are having to build your forms in flash in the first place, then they are a nightmare.

Making them look different is, on the surface of things, relatively easy.  You just go into the component and edit the skins.  The problem with this is that it doesn't change the component's avatar, so trying to lay components out is something of  a guessing game, seeing as they look nothing like what they are supposed to.
<h3>The Solution</h3>
While not a perfect solution, the best way I found to deal with it was to extend the components and overwrite the parts I needed.   To demonstrate I'll take you through extending a Button and a TickBox.

1. First create a blank movie clip.  For this we'll be creating a rounded button, so, to be totally original, we'll name our movie clip RoundedButton. Save the whole movie into a project folder. This just gives us somewhere organsied to work from.

2. Create a second keyframe, then create 2 layers.  Name one skins and one avatar.  In the second keyframe, on the skins layer, draw a rounded rectangle.

<a href="http://www.oinutter.co.uk/wp-content/uploads/2011/02/Image1.jpg"><img class="aligncenter size-medium wp-image-46" title="Image1" src="http://www.oinutter.co.uk/wp-content/uploads/2011/02/Image1-300x129.jpg" alt="Step 2" width="300" height="129" /></a>

3. Convert this rectangle to a MovieClip called RoundedButton_upSkin.

4. For now we'll just create the 3 basic states we want for the button so duplicate the MovieClip in the library twice and rename the copies to RoundedButton_downSkin and RoundedButton_overSkin.

5. Change the rectangle in the over skin to a different colour, then change the rectangle in the down skin to yet another colour and make is slightly smaller.  Drag these onto the stage with the over skin.

<a href="http://www.oinutter.co.uk/wp-content/uploads/2011/02/Image2.jpg"><img class="aligncenter size-medium wp-image-48" title="Image2" src="http://www.oinutter.co.uk/wp-content/uploads/2011/02/Image2-300x160.jpg" alt="Step 5" width="300" height="160" /></a>6. Copy the up skin to the first keyframe on the avatar layer.

7. You've now got your basic movie clip set up.  Now to turn it into a component.

8. Create a folder under your project src directory called components, then create a second directory under that called RoundedButton

9. Create a new file in this directory with your preferred ActionScript editor called RoundedButton.as.  Create a class called RoundedButton that inherits from the default button component.

[as3]
package components.RoundedButton {

import fl.controls.Button;

public class RoundedButton extends Button{

public function RoundedButton() {

}

}

}
[/as3]

11)  In your flash file, right click on the RoundedButton MovieClip in the library and select Export SWF. Export the movie to the same folder as your RoundedButton.as file as RoundedButton.swf.

12) Once again right click the Movie Clip, and this time select Component Definition]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>36</wp:post_id>
		<wp:post_date>2011-02-04 18:48:06</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="actionscript"><![CDATA[Actionscript]]></category>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_wp</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_clig</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_bitly</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_tweet_this</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_yourls</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_wp_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Image1</title>
		<link>http://www.oinutter.co.uk/?attachment_id=46</link>
		<pubDate>Fri, 04 Feb 2011 17:51:05 +0000</pubDate>
		<dc:creator>will</dc:creator>
		<guid isPermaLink="false">http://www.oinutter.co.uk/wp-content/uploads/2011/02/Image1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>46</wp:post_id>
		<wp:post_date>2011-02-04 17:51:05</wp:post_date>
		<wp:post_date_gmt>2011-02-04 17:51:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>image1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>36</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.oinutter.co.uk/wp-content/uploads/2011/02/Image1.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/02/Image1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"1239";s:6:"height";s:3:"534";s:14:"hwstring_small";s:23:"height='55' width='128'";s:4:"file";s:18:"2011/02/Image1.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:18:"Image1-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:18:"Image1-300x129.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"129";}s:5:"large";a:3:{s:4:"file";s:19:"Image1-1024x441.jpg";s:5:"width";s:4:"1024";s:6:"height";s:3:"441";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[Step 2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Image2</title>
		<link>http://www.oinutter.co.uk/?attachment_id=48</link>
		<pubDate>Fri, 04 Feb 2011 18:01:55 +0000</pubDate>
		<dc:creator>will</dc:creator>
		<guid isPermaLink="false">http://www.oinutter.co.uk/wp-content/uploads/2011/02/Image2.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>48</wp:post_id>
		<wp:post_date>2011-02-04 18:01:55</wp:post_date>
		<wp:post_date_gmt>2011-02-04 18:01:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>image2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>36</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.oinutter.co.uk/wp-content/uploads/2011/02/Image2.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/02/Image2.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"432";s:6:"height";s:3:"231";s:14:"hwstring_small";s:23:"height='68' width='128'";s:4:"file";s:18:"2011/02/Image2.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:18:"Image2-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:18:"Image2-300x160.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"160";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[Step 5]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Easel</title>
		<link>http://www.oinutter.co.uk/projects/easel/</link>
		<pubDate>Sun, 13 Feb 2011 16:24:32 +0000</pubDate>
		<dc:creator>will</dc:creator>
		<guid isPermaLink="false">http://www.oinutter.co.uk/</guid>
		<description></description>
		<content:encoded><![CDATA[Easel is a colour manipulation library written in Actionscript 3. It duplicates all the colour functions of <a title="Sass" href="http://sass-lang.com/" target="_blank">Sass</a>, with the exception of the fade-in and fade-out methods as I felt these were somewhat redundant with our access to flash's alpha property.

At the moment it only supports colours specified as hexadecimals but I intend to add support for passing RGB and RGBa values as well.

I should point out that the library isn't my own code, but rather a collection of functions I've found and, in the case of the actual manipulation functions, rewritten in AS3.  With the exception of the getRGB and getHex functions everything is a port of the ruby code that Sass uses.  The getRGB and getHex functions where from the Tint library by <a title="RevokeLabs - Tint Class" href="http://lab.revoke.ca/2009/04/as3-color-functions/" target="_blank">RevokeLab</a>.  I've put it up here as a consolidated library for people to use and also because I intend to expand upon it so any suggestions or requests would be gladly received.

Like the Sass functions, the library works by converting the Hex string to RGB, then working out the HSL values and performing manipulations on those.  For my part I've just rewritten Sass' functions in AS3 but the original algorithms are from <a title="Wikipedia RGB to HSL formula" href="http://en.wikipedia.org/wiki/HSL_and_HSV#Conversion_from_RGB_to_HSL_or_HSV" target="_blank">Wikipedia</a> for the RGB to HSL calculations and the <a title="W3 Specification for HSL to RGB" href="http://www.w3.org/TR/css3-color/#hsl-color." target="_blank">W3 specifications</a> for the HSL to RGB calculations.

Feel free to pull the source from GitHub and have a play around yourself.  Included in the repo is a test file which is also viewable from the Demo link below.  I'll probably be making this more interactive in the near future, at the moment it just randomly picks a colour, then performs all the functions on it.

<a title="GitHub" href="http://github.com/OiNutter/Easel" target="_self">Check out the source on GitHub</a> | <a title="Easel Demo" href="http://www.oinutter.co.uk/easel/" target="_self">Demo</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>60</wp:post_id>
		<wp:post_date>2011-02-13 16:24:32</wp:post_date>
		<wp:post_date_gmt>2011-02-13 16:24:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>easel</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>5</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_jd_tweet_this</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>related_title</wp:meta_key>
			<wp:meta_value><![CDATA[Related posts]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>localDraftUniqueID</wp:meta_key>
			<wp:meta_value><![CDATA[11D6E7BE-41FD-4BA9-BAE6-BF858BDD8C9C-3576-000008698632522C]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>localDraftUniqueID</wp:meta_key>
			<wp:meta_value><![CDATA[AC3DF166-84E6-42BE-B069-5C0512778BF4-3576-0000086AFEBF8C05]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Zebedee</title>
		<link>http://www.oinutter.co.uk/projects/zebedee/</link>
		<pubDate>Sun, 13 Feb 2011 18:38:49 +0000</pubDate>
		<dc:creator>will</dc:creator>
		<guid isPermaLink="false">http://www.oinutter.co.uk/</guid>
		<description></description>
		<content:encoded><![CDATA[Zebedee is a multi-framework accordion widget. At the moment I've only completed the <a title="Zepto JS" href="http://zeptojs.com" target="_blank">Zepto</a> version but intend to create versions for <a title="Scriptaculous" href="http://script.aculo.us" target="_blank">Scriptaculous</a>, <a title="Scripty 2" href="http://scripty2.com" target="_blank">Scripty2</a> and <a title="Emile" href="https://github.com/madrobby/emile" target="_blank">Emile</a>.  I may also look into doing versions for other animation frameworks and will probably end up doing a <a title="jQuery" href="http://jQuery.com" target="_blank">jQuery</a> version.  In case you're wondering, jQuery isn't on my initial list as, quite frankly, I feel there are enough ui widgets for jQuery as it is, but it'll be a good learning experience for me to do one eventually, and help make zebedee more useful to more people.  Also I primarily use Prototype and Scriptaculous when developing so it makes more sense for me to code for them first.

I took a lot of inspiration from <a title="Kevin Miller - p51 Labs" href="p51labs.com" target="_blank">Kevin Miller's</a> <a title="Accordion 2.0" href="http://www.p51labs.com/accordion/" target="_blank">Accordion 2.0</a> as this was the only good accordion widget I'd found for Scriptaculous and what I was using up until I wrote Zebedee. So why write it when I had a perfectly capable solution already available?  Well firstly, as with everything on this site, it was a learning exercise.  Secondly, I wanted to have a playaround with Thomas Fuchs' new Zepto library and I thought it would be interesting to try doing the accordion animations using CSS3.

Zebedee supports both vertical and horizontal accordions.  At the moment the Zepto version will only work on Webkit browsers due to the library's restrictions.  It does look like Firefox Mobile (Fennec) will support CSS3 animations but the authors of Zepto are wanting to just target Webkit as their main platform, with support for other browsers added through a yet to be added plugin mechanism.  However, I've modified version of Zepto included with Zebedee to get the animations working on Fennec, should you need it.

Like Accordion 2.0 I've gone with a class based mechanism to define the content and toggle components of the accordion.  I feel this gives more flexibility in your source markup.  It features the usual configureable options; classes, duration, transition type, and trigger event.

Check out the GitHub repo for installation and use instructions, as well as the usual source files.

<a title="GitHub" href="http://github.com/OiNutter/zebedee" target="_self">Check out the source on GitHub</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>62</wp:post_id>
		<wp:post_date>2011-02-13 18:38:49</wp:post_date>
		<wp:post_date_gmt>2011-02-13 18:38:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>zebedee</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>5</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_jd_tweet_this</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>related_title</wp:meta_key>
			<wp:meta_value><![CDATA[Related posts]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>localDraftUniqueID</wp:meta_key>
			<wp:meta_value><![CDATA[ECC28E12-07C6-4FD2-BC48-70720E3D05F1-3576-00000898F106663D]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>111</wp:comment_id>
			<wp:comment_author><![CDATA[Obscura &#8211; Canvas, CoffeeScript and Micro Frameworks | OiNutter.co.uk]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.oinutter.co.uk/2011/06/10/obscura-canvas-coffeescript-and-micro-frameworks/</wp:comment_author_url>
			<wp:comment_author_IP>193.202.110.113</wp:comment_author_IP>
			<wp:comment_date>2011-08-26 11:24:41</wp:comment_date>
			<wp:comment_date_gmt>2011-08-26 11:24:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] and github account.&nbsp; By the end of it 7 of my projects had been added; Obscura, Uncharted, Zebedee, Ermintrude, Easel, tipBox and Delorean (which I&#8217;ll add and post about soon). For me this was [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Delorean</title>
		<link>http://www.oinutter.co.uk/?page_id=64</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>will</dc:creator>
		<guid isPermaLink="false">http://www.oinutter.co.uk/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>64</wp:post_id>
		<wp:post_date>2011-02-11 17:28:49</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>5</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_jd_tweet_this</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>related_title</wp:meta_key>
			<wp:meta_value><![CDATA[Related posts]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Easel - An AS3 colour manipulation library</title>
		<link>http://www.oinutter.co.uk/2011/02/13/easel-an-as3-colour-manipulation-library/</link>
		<pubDate>Sun, 13 Feb 2011 17:18:38 +0000</pubDate>
		<dc:creator>will</dc:creator>
		<guid isPermaLink="false">http://www.oinutter.co.uk/?p=76</guid>
		<description></description>
		<content:encoded><![CDATA[Well my post for this month was going to be a tutorial on customising Flash UI components, but unfortunately doing it properly is going to take more time than I have available to me at the moment so I'm just going to keep working on that in the background and will post it when it's ready.  In the meantime I'm going to put up more information about some of my Open Source projects and hopefully get them better known, which in turns should, I hope, accomplish one of the aims of this blog.  Getting people to help improve my stuff and, by proxy, improving my skills and knowledge.

So first up, purely by virtue of being my most recent, is Easel, a colour (I'm english, so yes it is spelt right!) manipulation library for Actionscript 3.  Easel came about from a need to take a randomly generated colour and get colours that would work well with it for dynamically generated objects in a recent project at work.  At first I just managed to find the <a title="RevokeLabs - Tint Class" href="http://lab.revoke.ca/2009/04/as3-color-functions/" target="_blank">Tint library by RevokeLabs</a> which provided me with a darken function which did the trick for me.  However I then needed more, so I managed to find an algorithm to calculate the complementary colour on a forum somewhere, which I'm afraid I can't remember, but have subsequently replaced so I don't feel too bad about not crediting it.  From there I had the idea of replicating the colour manipulation functions of <a title="Sass" href="http://sass-lang.com/" target="_blank">Sass</a>, which I'd read about in a recent .Net tutorial, but hadn't had a chance to play around with (I have now and will no doubt be writing more about this down the line, watch this space!).

I was struggling to find the algorithms to accomplish what I needed in AS3 so I ended up pulling the source for Sass from GitHub and wading through that to find what I needed.  I then proceeded to rewrite the functions to AS3 which involved rewriting the original manipulation functions from the Tint library as they relied on manipulating the RGB values whereas Sass was working with the HSL.  I did however keep the getHex and getRGB functions as there seemed to be no real difference in them.  The upside to this approach was that I learnt a bit about colour manipulations, and got more experience with Ruby code, always a good thing!

Please check out the link below or on the right for the project page which contains links to the GitHub source and the Demo.

<a href="/projects/easel/">Easel</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>76</wp:post_id>
		<wp:post_date>2011-02-13 17:18:38</wp:post_date>
		<wp:post_date_gmt>2011-02-13 17:18:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>easel-an-as3-colour-manipulation-library</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="actionscript"><![CDATA[Actionscript]]></category>
		<category domain="post_tag" nicename="actionscript"><![CDATA[Actionscript]]></category>
		<category domain="post_tag" nicename="as3"><![CDATA[AS3]]></category>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="post_tag" nicename="color"><![CDATA[color]]></category>
		<category domain="post_tag" nicename="colour"><![CDATA[colour]]></category>
		<category domain="post_tag" nicename="hsl"><![CDATA[HSL]]></category>
		<category domain="post_tag" nicename="rgb"><![CDATA[RGB]]></category>
		<category domain="post_tag" nicename="sass"><![CDATA[Sass]]></category>
		<wp:postmeta>
			<wp:meta_key>_jd_tweet_this</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_clig</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_bitly</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/hwW9nt]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_wp</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_yourls</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_target</wp:meta_key>
			<wp:meta_value><![CDATA[http://www.oinutter.co.uk/2011/02/13/easel-an-as3-colour-manipulation-library/]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_wp_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>5</wp:comment_id>
			<wp:comment_author><![CDATA[Irene]]></wp:comment_author>
			<wp:comment_author_email>Lamas@e-kolay.net</wp:comment_author_email>
			<wp:comment_author_url>http://ozeana.com/bongokopfhoerer/</wp:comment_author_url>
			<wp:comment_author_IP>178.19.126.218</wp:comment_author_IP>
			<wp:comment_date>2011-02-13 23:24:37</wp:comment_date>
			<wp:comment_date_gmt>2011-02-13 23:24:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[greetings, outstanding wordpress blog, and an amazing understand! 1 for my bookmarks.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>7</wp:comment_id>
			<wp:comment_author><![CDATA[Jasper]]></wp:comment_author>
			<wp:comment_author_email>Beadnell137@shymail.com</wp:comment_author_email>
			<wp:comment_author_url>http://asicsonitsuka.ingyenblog.hu/</wp:comment_author_url>
			<wp:comment_author_IP>178.19.126.114</wp:comment_author_IP>
			<wp:comment_date>2011-02-14 22:13:52</wp:comment_date>
			<wp:comment_date_gmt>2011-02-14 22:13:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Really like the new look. I liked the information. Thank you for your useful page.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Zebedee - A Multi Framework Accordion Widget</title>
		<link>http://www.oinutter.co.uk/2011/02/14/zebedee-a-multi-framework-accordion-widget/</link>
		<pubDate>Mon, 14 Feb 2011 14:08:08 +0000</pubDate>
		<dc:creator>will</dc:creator>
		<guid isPermaLink="false">http://www.oinutter.co.uk/?p=88</guid>
		<description></description>
		<content:encoded><![CDATA[Zebedee is an accordion widget for multiple frameworks. At the moment it is only at V0.1, which only supports <a title="Zepto JS" href="http://zeptojs.com" target="_blank">Zepto JS</a>, but I will be adding support for various different animation frameworks as I have time.  I wanted to play around with Zepto, <a title="Thomas Fuchs' Blog" href="http://mir.aculo.us" target="_blank">Thomas Fuchs'</a> new mobile javascript framework and decided it would be fun to do an accordion widget to see if I could use the CSS3 transitions to animate the opening and closing of the accordion sections.

It was good fun having to go back to basics on it as I was used to having Prototype and Class.Create() to work with when creating new objects.  Thankfully zepto provided a few good utility functions to keep my code neat and simple.  The jQuery like chaining also came in handy in that regard.

I've purposefully kept the functionality simple, as I don't really think it needs to be all singing, all dancing!  At the moment it supports vertical and horizontal accordions and I will probably be adding the ability to set the the actual trigger event for the accordion to be bound to a child of the header object.  Also the duration, transition type and trigger event are all configurable, as well as the class names assigned to the various components.

I should hopefully be adding support for Scriptaculous in the next month or so, and Scripty 2 should follow soon after that, so watch this space.  In the meantime checkout the project page at the link below for more information and links to the GitHub source.  I'll also be popping up some demo pages when I get the chance.

<a title="Zebedee Procjet Page" href="/projects/zebedee/">Zebedee</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>88</wp:post_id>
		<wp:post_date>2011-02-14 14:08:08</wp:post_date>
		<wp:post_date_gmt>2011-02-14 14:08:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>zebedee-a-multi-framework-accordion-widget</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="accordion"><![CDATA[accordion]]></category>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="post_tag" nicename="css3"><![CDATA[css3]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="post_tag" nicename="javascript-2"><![CDATA[javascript]]></category>
		<category domain="post_tag" nicename="js"><![CDATA[js]]></category>
		<category domain="post_tag" nicename="mobile"><![CDATA[mobile]]></category>
		<category domain="post_tag" nicename="webkit"><![CDATA[webkit]]></category>
		<category domain="post_tag" nicename="widget"><![CDATA[widget]]></category>
		<category domain="post_tag" nicename="zepto"><![CDATA[zepto]]></category>
		<wp:postmeta>
			<wp:meta_key>_jd_tweet_this</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_clig</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_bitly</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/haZ1jn]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_wp</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_yourls</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_target</wp:meta_key>
			<wp:meta_value><![CDATA[http://www.oinutter.co.uk/2011/02/14/zebedee-a-multi-framework-accordion-widget/]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_wp_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>8</wp:comment_id>
			<wp:comment_author><![CDATA[Claudio Hollingshed]]></wp:comment_author>
			<wp:comment_author_email>Kyzer@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.gimmecandy.com/2011/02/how-to-deal-with-panic-attacks-best-tips/</wp:comment_author_url>
			<wp:comment_author_IP>58.150.182.76</wp:comment_author_IP>
			<wp:comment_date>2011-02-14 22:30:50</wp:comment_date>
			<wp:comment_date_gmt>2011-02-14 22:30:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[nice blog ,my girlfriend had a similiar post on this, but not as detailed as this one ;) . man bythe way -  truly like the theme]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>10</wp:comment_id>
			<wp:comment_author><![CDATA[Niki]]></wp:comment_author>
			<wp:comment_author_email>Kellywood395@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.hawaiimode.com/markernews/</wp:comment_author_url>
			<wp:comment_author_IP>178.19.126.224</wp:comment_author_IP>
			<wp:comment_date>2011-02-15 21:20:52</wp:comment_date>
			<wp:comment_date_gmt>2011-02-15 21:20:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Excellent information, cool page layout, keep up the good work]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>tipBox</title>
		<link>http://www.oinutter.co.uk/projects/tipbox/</link>
		<pubDate>Mon, 14 Mar 2011 07:39:10 +0000</pubDate>
		<dc:creator>will</dc:creator>
		<guid isPermaLink="false">http://www.oinutter.co.uk/?page_id=125</guid>
		<description></description>
		<content:encoded><![CDATA[<p>tipBox is a framework independent tool tip widget.  It has support for static positioning, mouse tracking, templating and transition animations.  toolTips can either be created individually or by scanning the page for elements with a given class.</p>
<p>Animation is accomplished through one of two methods. If you are using a Webkit or Gecko 2 browser such as Safari, Chrome or Firefox 4, tipBox will use CSS3 transitions, otherwise it will fallback to using Javascript.  The animation code was taken from emile.js and adapted to slightly for my uses.  Originally I'd just written a more specific piece of animation code but as I started wanting to add more possible animations emile's animate-it-all approach was the ideal place to go.</p>
<p>To automatically generate tool tips just call [gist id=1173240] and pass the class name of the trigger elements and the configuration options, if any, you wish to use. tipBox will use the title attribute to generate the tool tip content so if you are particular about semantics it's best to use something like a tags which support that attribute.</p>
<p>To change the default layout just update the template option with a new html string. Use a &#91;text&#93; placeholder where you want to display the content.  If you want to use more complicated templates with multiple bits of dynamic text, like a header and the content, you can pass an object as the text option with the property names corresponding to the placeholders. Placeholder format is the placeholder name in square brackets.</p>
<p>The repository is publicly available  on GitHub and there's a demo page at the link below.</p>
<p><a title="GitHub" href="http://github.com/OiNutter/tipBox" target="_blank">Check out the source on GitHub</a> | <a title="tipBox Demo" href="http://www.oinutter.co.uk/tipBox/">Demo</a></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>125</wp:post_id>
		<wp:post_date>2011-03-14 07:39:10</wp:post_date>
		<wp:post_date_gmt>2011-03-14 07:39:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tipbox</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>5</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_jd_tweet_this</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>localDraftUniqueID</wp:meta_key>
			<wp:meta_value><![CDATA[600726A0-10B7-4513-8205-3E57218F70BC-1207-000001F8359E8137]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>localDraftUniqueID</wp:meta_key>
			<wp:meta_value><![CDATA[7AF8CF97-25AB-40A0-B077-6F266E198817-1207-000001FC52A47163]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>localDraftUniqueID</wp:meta_key>
			<wp:meta_value><![CDATA[BE782408-5C63-406C-8EDB-7ACE55E60574-1285-00000206FD6D1B5C]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>localDraftUniqueID</wp:meta_key>
			<wp:meta_value><![CDATA[0B8A3797-9891-4D00-A74E-5839F1CDD86A-1317-00000211021F77DC]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>localDraftUniqueID</wp:meta_key>
			<wp:meta_value><![CDATA[7DF29A3B-6AC3-41C2-9E4C-3A06DCF6F51D-1317-0000021250CA7043]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>related_title</wp:meta_key>
			<wp:meta_value><![CDATA[Related posts]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_clig</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_bitly</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_wp</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_yourls</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_wp_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Obscura</title>
		<link>http://www.oinutter.co.uk/projects/obscura/</link>
		<pubDate>Sat, 18 Jun 2011 09:34:45 +0000</pubDate>
		<dc:creator>will</dc:creator>
		<guid isPermaLink="false">http://www.oinutter.co.uk/?page_id=165</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Obscura is a Micro Framework/Library for performing image manipulation using HTML5's Canvas object and Javascript. It provides several basic image manipulations, including resize, rotate, crop and flip, as well as a reflection function.  It is based on my original PHP <a title="ImageHandler" href="https://github.com/OiNutter/ImageHandler" target="_blank">ImageHandler</a> class and duplicates a lot of that functionality. While it doesn't currently save to the filesystem it does have a function to return the image as a base64 encoded string for passing to a server side script.  I will be looking at adding support for saving to the filesystem using javascript, at least in Firefox having seen this <a title="MDN File Writing Example" href="https://developer.mozilla.org/en/Code_snippets/File_I%2F%2FO#Writing_to_a_file" target="_blank">example</a>.</p>
<p>It has no dependencies other than a browser that supports Canvas although I am currently working on adding support for <a title="Explorer Canvas" href="http://code.google.com/p/explorercanvas/" target="_blank">ExCanvas</a> to enable it to be used with IE8. It has been tested and works in Firefox, Safari, Chrome, Opera and IE9.</p>
<p>The library can use either an image element in the document or a file on the server as it's source and write to either an on page canvas element or an internal canvas object.  It uses an internal canvas object to perform the manipulations upon before writing to the target element to account for differences in the way different browser engines interpret the Canvas spec's globalCompositeMethods.  With the exception of the save function all methods are chaninable, allowing multiple manipulations to be performed on an image.</p>
<p>Full documentation and source code can be found on GitHub and the demo link is provided below.</p>
<p><a title="GitHub" href="http://github.com/OiNutter/Obscura" target="_blank">Check out the source on GitHub</a> | <a title="Obscura Demos" href="http://oinutter.github.com/Obscura/" target="_blank">Demos</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>165</wp:post_id>
		<wp:post_date>2011-06-18 09:34:45</wp:post_date>
		<wp:post_date_gmt>2011-06-18 09:34:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>obscura</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>5</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_jd_tweet_this</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_clig</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_bitly</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_wp</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_yourls</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_wp_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>related_title</wp:meta_key>
			<wp:meta_value><![CDATA[Related posts]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>93</wp:comment_id>
			<wp:comment_author><![CDATA[Obscura &#8211; Canvas, CoffeeScript and Micro Frameworks | OiNutter.co.uk]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.oinutter.co.uk/2011/06/10/obscura-canvas-coffeescript-and-micro-frameworks/</wp:comment_author_url>
			<wp:comment_author_IP>193.202.110.113</wp:comment_author_IP>
			<wp:comment_date>2011-07-18 09:51:30</wp:comment_date>
			<wp:comment_date_gmt>2011-07-18 09:51:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] that are on my blog and github account.  By the end of it 7 of my projects had been added; Obscura, Uncharted, Zebedee, Ermintrude, Easel, tipBox and Delorean (which I&#8217;ll add and post about [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>A Fistful of Documentation</title>
		<link>http://www.oinutter.co.uk/?p=217</link>
		<pubDate>Sat, 10 Sep 2011 21:43:19 +0000</pubDate>
		<dc:creator>will</dc:creator>
		<guid isPermaLink="false">http://www.oinutter.co.uk/2011/09/10/a-fistful-of-documentation/</guid>
		<description></description>
		<content:encoded><![CDATA[Thanks to an issue raised on Uncharted by a fellow GitHub user pointing out that a lack of good examples was stopping people see if my work was any good and worth using I've been through all my projects and made sure they all have proper example pages and decent instructions in their README files.

Check them out at the links below:

Obscura - Examples | Documentation
Uncharted - Examples | Documentation
Ermintrude - Examples | Documentation
tipBox - Examples | Documentation
Easel - Examples | Documentation
Zebedee - Examples | Documentation]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>217</wp:post_id>
		<wp:post_date>2011-09-10 21:43:19</wp:post_date>
		<wp:post_date_gmt>2011-09-10 21:43:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>a-fistful-of-documentation</wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="post_tag" nicename="documentation"><![CDATA[Documentation]]></category>
		<category domain="post_tag" nicename="examples"><![CDATA[Examples]]></category>
		<category domain="post_tag" nicename="readme"><![CDATA[README]]></category>
		<wp:postmeta>
			<wp:meta_key>_jd_wp_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_bitly</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_tweet_this</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_clig</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_wp</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_yourls</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Skeletor</title>
		<link>http://www.oinutter.co.uk/projects/skeletor/</link>
		<pubDate>Thu, 20 Oct 2011 22:32:16 +0000</pubDate>
		<dc:creator>will</dc:creator>
		<guid isPermaLink="false">http://www.oinutter.co.uk/?page_id=232</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Skeletor is a Ruby Gem for creating project skeletons quickly and easily. It loads a skeleton definition from a specified YAML or JSON template and will create a directory structure including blank files or specified includes and run build tasks such as initialising a Git repository or Capifying your project.</p>
<p>Skeletor comes packaged with 2 templates; a javascript library template and a ruby gem template but you can easily create your own and store them in a .skeletor folder in you home folder for easy access, or anywhere on your hard drive.</p>
<p>For full usage instructions check out the GitHub page. Skeletor can also be found on RubyGems.org</p>
<p style="text-align: left;"><a title="Skeletor on GitHub" href="http://github.com/OiNutter/skeletor" target="_blank">GitHub</a> | <a title="Skeletor on RubyGems" href="https://rubygems.org/gems/skeletor" target="_blank">RubyGems</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>232</wp:post_id>
		<wp:post_date>2011-10-20 22:32:16</wp:post_date>
		<wp:post_date_gmt>2011-10-20 22:32:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>skeletor</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>5</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_jd_wp_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_yourls</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_wp</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_bitly</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_clig</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_tweet_this</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>related_title</wp:meta_key>
			<wp:meta_value><![CDATA[Related posts]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>160</wp:comment_id>
			<wp:comment_author><![CDATA[Introducing Skeletor and Grayskull | OiNutter.co.uk]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.oinutter.co.uk/2011/10/20/introducing-skeletor-and-grayskull/</wp:comment_author_url>
			<wp:comment_author_IP>193.202.110.113</wp:comment_author_IP>
			<wp:comment_date>2011-10-20 22:39:20</wp:comment_date>
			<wp:comment_date_gmt>2011-10-20 22:39:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Skeletor | GitHub [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Grayskull</title>
		<link>http://www.oinutter.co.uk/projects/grayskull/</link>
		<pubDate>Thu, 20 Oct 2011 22:35:24 +0000</pubDate>
		<dc:creator>will</dc:creator>
		<guid isPermaLink="false">http://www.oinutter.co.uk/?page_id=234</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Grayksull is a Ruby Gem for validating JSON and YAML files against a schema template. It can be used either from the command line or as a library inside your Ruby project. You can specify the expected structure of the files and create custom node types to match against.</p>
<p>For full usage instructions check out the GitHub page. Grayskull can also be found on RubyGems.org</p>
<p><a title="Grayskull on GitHub" href="http://www.oinutter.co.uk/projects/easel/" target="_blank">GitHub</a> | <a title="Grayskull on RubyGems" href="https://rubygems.org/gems/grayskull" target="_blank">RubyGems</a></p>
<p>&nbsp;</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>234</wp:post_id>
		<wp:post_date>2011-10-20 22:35:24</wp:post_date>
		<wp:post_date_gmt>2011-10-20 22:35:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>grayskull</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>5</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_jd_tweet_this</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_clig</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_bitly</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_wp</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_yourls</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_wp_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>related_title</wp:meta_key>
			<wp:meta_value><![CDATA[Related posts]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Why I Love Regular Expressions!</title>
		<link>http://www.oinutter.co.uk/?p=246</link>
		<pubDate>Thu, 17 Nov 2011 20:20:04 +0000</pubDate>
		<dc:creator>will</dc:creator>
		<guid isPermaLink="false">http://www.oinutter.co.uk/?p=246</guid>
		<description></description>
		<content:encoded><![CDATA[This may sound like a strange statement but I honestly find regular expressions relaxing.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>246</wp:post_id>
		<wp:post_date>2011-11-17 20:20:04</wp:post_date>
		<wp:post_date_gmt>2011-11-17 20:20:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_format" nicename="post-format-standard"><![CDATA[Standard]]></category>
		<category domain="post_tag" nicename="regular-expressions"><![CDATA[regular expressions]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_jd_tweet_this</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_clig</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_bitly</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_wp</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_yourls</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_wp_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Python Wrangling - Getting To Know The Beast</title>
		<link>http://www.oinutter.co.uk/2011/02/26/python-wrangling-getting-to-know-the-beast/</link>
		<pubDate>Sat, 26 Feb 2011 21:06:22 +0000</pubDate>
		<dc:creator>will</dc:creator>
		<guid isPermaLink="false">http://www.oinutter.co.uk/?p=104</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Okay, so this month I finally got chance to delve into Python. I'm using version 3.1, as obviously there's no point learning something thats going to be obsolete fairly soon, although this did make finding examples and stuff harder as the majority of stuff I found was for Python 2.</p>
<p>While I know python is a popular, and very capable, web programming language, I'm not really interested in that side of it. As far as I'm concerned I've got PHP which I use for regular development, and am pretty competent with, and Ruby on Rails, which I'm starting to try and get my head round, I neither need nor want yet another contender vying for position as my chosen tool when it comes to developing for the web.  What I am very interested in python for, is desktop apps.  From what I've heard python is a pretty good cross platform language with good tie-ins to the operating system and file structure.  It also looks a hell of a lot simpler than C++, which I have tried to master on a few occasions and only ever succeeded in achieving basic competency with.</p>
<p>Now if you've seen any of my other posts you'll know that I tend to do a lot of work with Javascript, and also know Actionscript, so you may be wondering why I don't just use Air for building desktop apps.  I've used Air before to build small desktop widgets using Actionscript, and will undoubtedly at some point end up playing around with it a bit more, but for users to run Air apps they're required to download the Air runtime, and the last time I looked the Linux version was a bit behind.  What I'm hoping to get with Python is something I can write once, maybe with some os specific tweaks, and compile to a valid executable/installer for any system.</p>
<p>So onto my first impressions.  For someone that is used to languages like PHP, Javascript and Actionscript, Python is something of a shock to the system.  The lack of curly braces to enclose functions and statements was something I was starting to come to terms with from Ruby, but the lack of any form of closing statement made reading through the code a somewhat strange experience.  My learning project is a file renaming utility so I found the os functions, particularly os.rename() really useful.  I started off just building the app as a command line script, then once I'd got that basic renaming functionality figured out, (not really that difficult when it's just a call to one built in function), I started looking into adding a gui.</p>
<p>I ended up going with PyQT4, mainly because it was the only free, cross browser GUI framework that worked with Python 3.  The hardest part about getting it all working was finding out how to actually create the window and use the ui.  I'm using the following code:</p>
<p>[gist id=1173233]</p>
<p>Where main.ui is my layout xml file.  One of the things I liked about PyQT was that it came with a GUI designer utility which lets me just layout the gui as I wanted it and save it to xml.  Makes building the layout much easier.  At the moment I've not really done much more than set up a basic gui with ultra simple file renaming (you select a file, type a new name and hit the big rename button) but I'm intending to add batch renaming with various renaming actions such as regular expressions, substringing, extension changing and more.</p>
<p>The main challenge at the moment is understanding how to use PyQt as I'm afraid the documentation isn't particularly novice friendly, being more of a reference library.  Some examples would be handy, especially as I struggled to find anything on google. I think when I'm a bit more comfortable with things I'll post some examples/tutorials.  I'll also write a bit more about my python experiences as I get to spend more time with it.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>104</wp:post_id>
		<wp:post_date>2011-02-26 21:06:22</wp:post_date>
		<wp:post_date_gmt>2011-02-26 21:06:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>python-wrangling-getting-to-know-the-beast</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="post_tag" nicename="file"><![CDATA[file]]></category>
		<category domain="post_tag" nicename="gui"><![CDATA[gui]]></category>
		<category domain="post_format" nicename="post-format-standard"><![CDATA[Standard]]></category>
		<category domain="post_tag" nicename="pyqt4"><![CDATA[pyqt4]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="python-2"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="renaming"><![CDATA[renaming]]></category>
		<wp:postmeta>
			<wp:meta_key>_jd_tweet_this</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_clig</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_bitly</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_wp</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_yourls</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_wp_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>161</wp:comment_id>
			<wp:comment_author><![CDATA[competency]]></wp:comment_author>
			<wp:comment_author_email>competency@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.signature4u.com</wp:comment_author_url>
			<wp:comment_author_IP>180.183.106.137</wp:comment_author_IP>
			<wp:comment_date>2011-10-21 07:16:02</wp:comment_date>
			<wp:comment_date_gmt>2011-10-21 07:16:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Awesome! This article is amazing, it really brightens my day! xoxo]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1319181362.5486";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:64:{s:15:"comment_post_ID";s:3:"104";s:14:"comment_author";s:10:"competency";s:20:"comment_author_email";s:20:"competency@gmail.com";s:18:"comment_author_url";s:19:"www.signature4u.com";s:15:"comment_content";s:66:"Awesome! This article is amazing, it really brightens my day! xoxo";s:12:"comment_type";s:0:"";s:14:"comment_parent";s:1:"0";s:7:"user_ID";s:1:"0";s:7:"user_ip";s:15:"180.183.106.137";s:10:"user_agent";s:208:"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; GTB7.1; InfoPath.2; .NET CLR 2.0.50727; .NET CLR 1.1.4322; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022; .NET4.0C; .NET4.0E; AskTbCLM/5.9.1.14019)";s:8:"referrer";s:80:"http://www.oinutter.co.uk/2011/02/26/python-wrangling-getting-to-know-the-beast/";s:4:"blog";s:25:"http://www.oinutter.co.uk";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:80:"http://www.oinutter.co.uk/2011/02/26/python-wrangling-getting-to-know-the-beast/";s:9:"user_role";s:0:"";s:21:"akismet_comment_nonce";s:6:"passed";s:11:"POST_author";s:10:"competency";s:10:"POST_email";s:20:"competency@gmail.com";s:8:"POST_url";s:19:"www.signature4u.com";s:12:"POST_comment";s:68:"Awesome! This article is amazing, it really brightens my day! xoxo
";s:11:"POST_submit";s:14:"Submit Comment";s:20:"POST_comment_post_ID";s:3:"104";s:19:"POST_comment_parent";s:1:"0";s:26:"POST_akismet_comment_nonce";s:10:"b16db29205";s:15:"SERVER_SOFTWARE";s:6:"Apache";s:11:"REQUEST_URI";s:21:"/wp-comments-post.php";s:4:"PATH";s:28:"/usr/local/bin:/usr/bin:/bin";s:18:"ONECOM_DOMAIN_NAME";s:14:"oinutter.co.uk";s:18:"ONECOM_DOMAIN_ROOT";s:40:"/customers/oinutter.co.uk/oinutter.co.uk";s:16:"PHP_INI_SCAN_DIR";s:58:"/customers/oinutter.co.uk/oinutter.co.uk/config/conf.d.php";s:13:"ONECOM_TMPDIR";s:44:"/customers/oinutter.co.uk/oinutter.co.uk/tmp";s:9:"FCGI_ROLE";s:9:"RESPONDER";s:13:"DOCUMENT_ROOT";s:50:"/customers/oinutter.co.uk/oinutter.co.uk/httpd.www";s:20:"ONECOM_DOCUMENT_ROOT";s:50:"/customers/oinutter.co.uk/oinutter.co.uk/httpd.www";s:23:"WEBC_USER_DOCUMENT_ROOT";s:50:"/customers/oinutter.co.uk/oinutter.co.uk/httpd.www";s:11:"DOMAIN_NAME";s:14:"oinutter.co.uk";s:21:"WEBC_USER_DOMAIN_NAME";s:14:"oinutter.co.uk";s:11:"HTTP_ACCEPT";s:263:"image/gif, image/jpeg, image/pjpeg, image/pjpeg, application/x-silverlight, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, application/x-ms-application, application/x-ms-xbap, application/vnd.ms-xpsdocument, application/xaml+xml, */*";s:12:"HTTP_REFERER";s:80:"http://www.oinutter.co.uk/2011/02/26/python-wrangling-getting-to-know-the-beast/";s:20:"HTTP_ACCEPT_LANGUAGE";s:2:"th";s:15:"HTTP_USER_AGENT";s:208:"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; GTB7.1; InfoPath.2; .NET CLR 2.0.50727; .NET CLR 1.1.4322; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022; .NET4.0C; .NET4.0E; AskTbCLM/5.9.1.14019)";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:20:"HTTP_ACCEPT_ENCODING";s:13:"gzip, deflate";s:9:"HTTP_HOST";s:18:"www.oinutter.co.uk";s:14:"CONTENT_LENGTH";s:3:"267";s:15:"HTTP_CONNECTION";s:5:"close";s:18:"HTTP_CACHE_CONTROL";s:8:"no-cache";s:11:"HTTP_COOKIE";s:0:"";s:16:"SERVER_SIGNATURE";s:0:"";s:11:"SERVER_NAME";s:18:"www.oinutter.co.uk";s:11:"SERVER_ADDR";s:15:"193.202.110.113";s:11:"SERVER_PORT";s:2:"80";s:11:"REMOTE_ADDR";s:15:"180.183.106.137";s:12:"SERVER_ADMIN";s:15:"support@one.com";s:15:"SCRIPT_FILENAME";s:71:"/customers/oinutter.co.uk/oinutter.co.uk/httpd.www/wp-comments-post.php";s:11:"REMOTE_PORT";s:5:"25256";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:14:"REQUEST_METHOD";s:4:"POST";s:12:"QUERY_STRING";s:0:"";s:11:"SCRIPT_NAME";s:21:"/wp-comments-post.php";s:8:"PHP_SELF";s:21:"/wp-comments-post.php";s:12:"REQUEST_TIME";s:10:"1319181361";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Zebedee - v0.2 - A whole lot of frameworks</title>
		<link>http://www.oinutter.co.uk/2011/03/04/zebedee-v0-2-a-whole-lot-of-frameworks/</link>
		<pubDate>Fri, 04 Mar 2011 14:30:34 +0000</pubDate>
		<dc:creator>will</dc:creator>
		<guid isPermaLink="false">http://www.oinutter.co.uk/?p=116</guid>
		<description></description>
		<content:encoded><![CDATA[Ok, there's only 3 more but still, it sounds more exciting.  Yes,  zebedee has made it to version 0.2, my first actual version increment on  any of my projects, I feel quite proud!  So what's new in version 0.2?   Well the main additions are the versions for <a title="Scriptaculous" href="http://script.aculo.us" target="_blank">Scriptaculous</a>, <a title="Scripty 2" href="http://scripty2.com" target="_blank">Scripty 2</a> and <a title="emile.js" href="https://github.com/madrobby/emile" target="_blank">emile.js</a>.  Check out the readme for details on what files are needed and how to use them.  In addition there are also a few bug tweaks, minor reworking of the zepto version to cope with a major restructuring of zepto and the addition of a default panel option.

For the large part I've kept the code the same on the new versions, the main changes being updating the open and close methods to use each individual library.  I've also removed functions that were duplications of methods available now available to me in Prototype for the Scriptaculous and Scripty 2 versions.  I did however keep my own object merge function as it merges more recursively than Prototypes version.  Emile however was much more of a challenge as it is solely an animation framework and therefore contains no helper methods whatsoever.  Cue a trip deep into zepto's code and the <a title="Mozilla Documentation Centre" href="https://developer.mozilla.org/en-US/docs" target="_blank">Mozilla Javascript Docs</a> to find out how the frameworks do things.  I ended up adding a few helper methods to deal with manipulating the classnames, just to make life easier.

I've also added in the facility for the Scripty 2 version to use Scripty 2's ability to use css transitions where available.  This is only available on linear and sinusoidal transitions at the moment but the library will fallback to javascript for the unavailable transitions.  In the case of emile the transition calculation functions have to be provided as an option so I've added a zebedeeTransition object with a selection of functions.  The default object just includes the linear and sinusoidal transitions but by including the zeb-transitions.js file you can get access to all the transition types of Scripty 2.  The calculations are taken from Scripty 2's included calculations that are based on Robert Penner's original AS2 <a href="http://www.robertpenner.com/easing/">easing equations</a>.

Coming up in version 0.3 will be a jQuery version, callbacks for when the panel opens and closes, at both the start and finish of the animation, and the option to keep one panel open at all times.

<a title="Zebedee Procjet Page" href="../projects/zebedee/">Zebedee</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>116</wp:post_id>
		<wp:post_date>2011-03-04 14:30:34</wp:post_date>
		<wp:post_date_gmt>2011-03-04 14:30:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>zebedee-v0-2-a-whole-lot-of-frameworks</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="accordion"><![CDATA[accordion]]></category>
		<category domain="post_tag" nicename="animation"><![CDATA[animation]]></category>
		<category domain="post_tag" nicename="emile"><![CDATA[emile]]></category>
		<category domain="post_tag" nicename="framework"><![CDATA[framework]]></category>
		<category domain="post_tag" nicename="javascript-2"><![CDATA[javascript]]></category>
		<category domain="post_tag" nicename="scriptaculous"><![CDATA[scriptaculous]]></category>
		<category domain="post_tag" nicename="scripty2"><![CDATA[scripty2]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="zebedee"><![CDATA[zebedee]]></category>
		<category domain="post_tag" nicename="zepto"><![CDATA[zepto]]></category>
		<wp:postmeta>
			<wp:meta_key>_jd_tweet_this</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_clig</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_bitly</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/fyZAWE]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_wp</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_yourls</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_target</wp:meta_key>
			<wp:meta_value><![CDATA[http://www.oinutter.co.uk/2011/03/04/zebedee-v0-2-a-whole-lot-of-frameworks/]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_wp_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Tool tips, javascript animations and coding without a net</title>
		<link>http://www.oinutter.co.uk/2011/03/28/tool-tips-javascript-animations-and-coding-without-a-net/</link>
		<pubDate>Mon, 28 Mar 2011 17:04:03 +0000</pubDate>
		<dc:creator>will</dc:creator>
		<guid isPermaLink="false">http://www.oinutter.co.uk/?p=143</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I've been working on overhauling the UI experience in the back end systems we use at work and decided that I wanted some tool tips to help tell users what things do without them having to ask us. The only decent tool tip library I've ever found was <a title="Prototip" href="http://www.nickstakenburg.com/projects/prototip/" target="_blank">Prototip </a>by Nick Stakenburg but I knew I wouldn't be able to get away with buying a license for it so I needed to create my own.&nbsp; After my experiences doing the emile.js version of zebedee I decided to give myself a bit of a challenge and go completely frameworkless to create a standalone widget.</p>
<p>First up was finding out how to do encapsulation in javascript so that I was only giving access to the methods that needed to be accessible from outside the class.&nbsp; The way this is done is to return an object with the public methods defined in it, rather than doing return this.&nbsp; For purposes of scope I defined the methods before the return statement, then returned references to them. Like so:</p>
<p>[gist id=1173224]</p>
<p>Once I had that that figured out it was down to creating the various methods and setting up the event listeners.&nbsp; The main requirement was handling the positioning of the tool tip in relation to it's trigger element.&nbsp; As the position could either be fixed to a point on the trigger or follow the mouse, I ended up creating an object with either the element properties or the mouse coordinates and using that as the starting reference to perform the calculations from, then scanned the position option for one of the y position possibilities and set the top and did the same for the x position options.&nbsp; I later expanded this to have an optional element passed through which would be positioned instead of the tooltip, for use with the animations.</p>
<p>I spent a lot of time going through <a title="Prototype JS" href="http://prototypejs.org" target="_blank">prototype </a>and <a title="Zepto" href="http://zeptojs.com" target="_blank">zepto</a> to find out how to do the various things I needed to do without the frameworks and ended up stealing various little bits of code, like the user agent regular expressions from zepto so I could determine whether the browser was running webkit, I also tweaked this to check for gecko 2 as well.&nbsp; This was so I could use css animations where available for the transitions.&nbsp; When it came to dealing with the animation, <a title="Emile,js" href="http://github.com/madrobby/emile" target="_blank">emile.js</a> ended up being my main source of reference, to the point that when I needed to expand my original animation function to be more flexible I ended up taking emile's animation code and a few of it's helpers and tweaking them for my own purposes.</p>
<p>The biggest challenge with doing the animation was the scale transition and positioning it, particularly the css animations.&nbsp; With the javascript animation it was easy to make the box appear to grow and shrink from it's trigger element, as I just needed to call the position method each time I adjusted the size.&nbsp; But with the css couldn't call anything on each iteration so I had to create a test element that was a clone of the tool tip, alter that, reposition it and get the end values, to then pass through to the animation function.&nbsp; In the end it worked out but I'd like to play around with it to see if I can get something less long winded.&nbsp; I also want to have a play to see if it's possible to make the text grow and shrink with the box, by using ems.&nbsp; Another interesting thing I discovered while working on the CSS transitions is that both Gecko 2 and Webkit have their own version of the transition end event, in Gecko 2 you can use transitionend but in webkit you need to call webkitTransitionEnd.&nbsp; Also this event will get called for each property you are animation, so in the case of the scale transition,where I was animating width,height,left and top, the event was being called four times.&nbsp; Remember to check for this when writing your handlers.</p>
<p>I ended up namespacing the tool tip function inside a tipBox object, so I could add the scan method and keep them together.&nbsp; This means that while the calls are a bit longer, the functions are kept neat and secure, and shouldn't conflict with anything.</p>
<p>The scan method enables you to have a load of elements on a page (preferably a tags for semantic reasons) with a given class name that you can turn into tipBox triggers with one function call.&nbsp; All you need to do is pass the class name and the options you want to use to the method and it will scan the page and set up the tipBox for each one, using the title attribute to supply the text.</p>
<p>I found getting the initial stages of the widget working were a lot easier than I expected, which I take to be a good sign that my understanding and knowledge is improving (either that or it's easier thatn I thought and I'm just being a numpty).&nbsp; The animations presented my biggest challenge and took as much time to work round as everything else did to create but were without a doubt the most rewarding part of it to complete.&nbsp; The whole coding without a net approach forced me to explore and learn more, and work out my own solutions to how to do things, which was great fun, and will hopefully result in an improvement in my javascript work from now on.</p>
<p>If you want to get download the code or see demos check out the project page for tipBox</p>
<p><a title="tipBox" href="/projects/tipbox/">tipBox</a></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>143</wp:post_id>
		<wp:post_date>2011-03-28 17:04:03</wp:post_date>
		<wp:post_date_gmt>2011-03-28 17:04:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tool-tips-javascript-animations-and-coding-without-a-net</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="animation"><![CDATA[animation]]></category>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="post_tag" nicename="css3"><![CDATA[css3]]></category>
		<category domain="post_tag" nicename="encapsulation"><![CDATA[encapsulation]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="post_tag" nicename="javascript-2"><![CDATA[javascript]]></category>
		<category domain="post_tag" nicename="tool-tips"><![CDATA[tool tips]]></category>
		<wp:postmeta>
			<wp:meta_key>_jd_tweet_this</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_clig</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_bitly</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_wp</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_yourls</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_wp_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Obscura - Canvas, CoffeeScript and Micro Frameworks</title>
		<link>http://www.oinutter.co.uk/2011/06/10/obscura-canvas-coffeescript-and-micro-frameworks/</link>
		<pubDate>Fri, 10 Jun 2011 18:40:44 +0000</pubDate>
		<dc:creator>will</dc:creator>
		<guid isPermaLink="false">http://www.oinutter.co.uk/?p=159</guid>
		<description></description>
		<content:encoded><![CDATA[<p>It's been a busy few months so I'm a bit behind on my posting so hopefully I can get back on schedule now. Once again I've been working on another javascript library, this time a canvas based image manipulation library called Obscura.</p>
<p>It all started with the arrival on the scene of microjs.com by Thomas Fuchs and Dustin Diaz. For those of you who haven't heard of it, <a title="Micro JS" href="http://microjs.com" target="_blank">microjs.com</a> is an index of micro frameworks curated by Thomas and Dustin. The requirements for inclusion on the site are as follows:</p>
<p>Must be written in javascript<br />
Must be less than 5k minified and gzipped<br />
Must be focused on one thing, rather than being a library of all trades<br />
Must have no dependencies</p>
<p>I liked the idea of this and was keen to get a listing on there as a step towards my goal of becoming more known in the community. Unfortunately none of my previous projects met the requirements, so if I wanted in I needed to come up with something else. I'd seen a tutorial in .Net magazine on image editing using javascript and canvas and decided I could port my existing PHP ImageHandler class to javascript using canvas as a base.</p>
<p>I also decided to use this as an oppurtunity to try out <a title="CoffeeScript" href="http://jashkenas.github.com/coffee-script/" target="_blank">CoffeeScript</a> which I've been hearing a lot about. Once again, for those out of the loop, CoffeeScript is a lot like <a title="Sass" href="http://sass-lang.com" target="_blank">Sass</a>, which I've mentioned previously, but for Javascript. It's a language that compiles to javascript, so you can write your code in CoffeeScript's clearer, more verbose syntax, then compile it to normal working syntax.</p>
<p>I'm not normally a fan of stuff like this as I've never really seen the point, if you want to write javascript just learn javascript. However both Sass and CoffeeScript have convinced me that there are benefits to these things. In the case of CoffeeScript the automatic handling of things like scope and variable declaration make developing a lot easier and safer. The automatic wrapping in a function did cause me some confusion at first, which I'll discuss later, but does prevent any unnecessary pollution of the global scope and can be turned off with a compile option. I am however still adjusting to the braceless syntax which I'm not too keen on. I appreciate that it makes the code cleaner and smaller but as a php developer predominantly I've grown used to curly braces or at the very least some kind of ruby-esque closing statement.</p>
<p>I decided to stick with a small selection of basic image manipulation functions to start with. As I was using my existing PHP library as a starting point I had a ready supplied list of functions to use, with the basic logic all worked out. All I needed to do was work out how to write the functions in CoffeeScript and understand how to apply them with canvas. The latter proved to be the more challenging task for the most part. Particularly due to the inconsistencies in how the W3C's canvas spec is implemented in Gecko and Webkit. The main issue I came across was when working on the rotate function. I had been using the globalCompositeMethod copy to overwrite the existing canvas data which worked fine in Firefox but in Safari and Chrome "copy" actually overlays the new data onto the old, so the original, unrotated image was still visible. I ended up having to create an internal canvas object as a kind of staging area so all manipulations were performed on that before the finished article was sent to the target canvas.</p>
<p>By far my favourite CoffeeScript feature when writing this was the way it handles scope and the ability to reference the parent object easily when writing the code made life considerably easier, particularly as all the functions perform operations on internal objects. For any of you who haven't played with CoffeeScript yet or aren't familiar with the scope handling, it works like this:</p>
<p>[gist id=1084753 file=example.coffee]</p>
<p>Which will compile to this</p>
<p>[gist id=1084753 file=compiled.js]</p>
<p>Notice that CoffeeScript adds the __bind function which is then used to make sure the function executes in the object scope. Granted you can write this yourself but the syntax of the CoffeeScript is a lot simpler and clearer as to what is going on.</p>
<p>After a few weeks of playing around I got Obscura into a state I was happy with for a first version release. It passed all the tests for inclusion on microjs.com, coming in at 1.5K compressed and gzipped, so I submitted it for inclusion and got it accepted. Obviously I was pretty pleased about this as it was one of the main reasons for writing the library in the first place and it was great that my work was considered good enough to be accepted onto the site but it didn't stop there.&nbsp; Later in the same week I got an email from <a title="Softpedia" href="http://softpedia.com/" target="_blank">Softpedia</a> informing me that one of my projects had been added to their Scripts section. At first I had no idea what they were talking about as I hadn't submitted anything to Softpedia.Upon further investigation it would appear that they've been scanning other websites and finding libraries and widgets to add to their new Scripts download section.&nbsp; The project they'd added was Obscura so what I'm guessing has happened is they've been scanning through microjs.com and adding projects from there.&nbsp; It also appears they've been using those projects as starting points to find other projects as throughout the day I got more emails telling me they'd added other projects that are on my blog and github account.&nbsp; By the end of it 7 of my projects had been added; <a title="Obscura" href="http://www.oinutter.co.uk/projects/obscura/">Obscura</a>, <a title="Uncharted" href="http://www.oinutter.co.uk/projects/uncharted/">Uncharted</a>, <a title="Zebedee" href="http://www.oinutter.co.uk/projects/zebedee/">Zebedee</a>, <a title="Ermintrude" href="http://www.oinutter.co.uk/projects/ermintrude/">Ermintrude</a>, <a title="Easel" href="http://www.oinutter.co.uk/projects/easel/">Easel</a>, <a title="tipBox" href="http://www.oinutter.co.uk/projects/tipbox/">tipBox</a> and Delorean (which I'll add and post about soon). For me this was a huge breakthrough in terms of what I've been trying to achieve this year as it's providing more avenues for people to find out about my work and hopefully use it and help improve it. It's also resulted in people starting to watch my GitHub repositories so hopefully I can build on this and keep raising my profile as the year goes on.</p>
<p>For now feel free to check out the Obscura project page for demos and links to the GitHub repository.</p>
<p><a title="Obscura" href="http://www.oinutter.co.uk/projects/obscura/">Obscura</a></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>159</wp:post_id>
		<wp:post_date>2011-06-10 18:40:44</wp:post_date>
		<wp:post_date_gmt>2011-06-10 18:40:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>obscura-canvas-coffeescript-and-micro-frameworks</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="canvas"><![CDATA[Canvas]]></category>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="post_tag" nicename="coffee-script"><![CDATA[coffee-script]]></category>
		<category domain="post_tag" nicename="coffeescript"><![CDATA[coffeescript]]></category>
		<category domain="post_tag" nicename="image-manipulation"><![CDATA[image manipulation]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="post_tag" nicename="javascript-2"><![CDATA[javascript]]></category>
		<category domain="post_tag" nicename="micro-frameworks"><![CDATA[micro frameworks]]></category>
		<wp:postmeta>
			<wp:meta_key>_jd_tweet_this</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_clig</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_bitly</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_wp</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_yourls</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_wp_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Objective-C and iOS Development - Taking My First Steps</title>
		<link>http://www.oinutter.co.uk/2011/08/26/objective-c-and-ios-development-taking-my-first-steps/</link>
		<pubDate>Fri, 26 Aug 2011 11:06:38 +0000</pubDate>
		<dc:creator>will</dc:creator>
		<guid isPermaLink="false">http://www.oinutter.co.uk/?p=183</guid>
		<description></description>
		<content:encoded><![CDATA[<p>So I recently managed to get myself a Macbook, which besides finally giving me a home computer that can cope with what I'm throwing at it, has finally enabled me to start looking at iOS development. I've briefly played with Android development but what little Java skills I picked up at university and was able to remember after all this time weren't quite up to the task. So you'd think that tackling developing in Objective-C, a language I've never used, would be an even bigger challenge right? Well thankfully I managed to find some help, primarily from iTunes U. If anyone hasn't checked this out yet I'd highly recommend it, there are a load of free to download lectures from several of the big universities on there (primarily US from what I could see but there were some others). The course I've been following is Stanford's <a title="iTunes U Download for C193p" href="http://itunes.apple.com/us/podcast/cs193p-student-final-projects/id395605774?i=90218598">cs193p</a> course on iOS application development by Paul Hegarty. If you can get past Paul's slightly eccentric seeming nature, anyone wanting to get into iOS development would do well to check this out. I'm only a few lectures in at the moment but the course has already succeeded in helping me finally get my head around MVC.</p>
<p>So what do I think of Objective-C? Well I'm still in my early stages of playing with the language so this is really just a first impression but I think I'm going to like developing in it, and I certainly think I'm going to find it easier and more enjoyable than I ever did Java. It's very different from most of the languages I've ever learned and certainly a huge change from the languages I use on a daily basis (PHP and Javascript). One of the first things I've noticed is how verbose it is. There is very much a convention of the code reading like plain english, with things such as long variable names and methods. The way methods are defined is one of the primary examples I would give of this verbosity, and of the difference of Objective-C to languages I'm used to. The following examples show a comparison of how methods are defined in Actionscript 3 (I know, I know, but it's the only langauge I know well enough to write comparison code in that defines the return and argument types) and Objective-C.</p>
<p>[gist id=1171831 file=as3style.as]</p>
<p>[gist id=1171831 file=objcstyle.m]</p>
<p>As you can see the single argument methods are pretty straight forward, return type at the start, followed by the method name, then the argument and it's type listed after a semi colon (felt weird having no brackets). From what I've seen there doesn't seem to be any indication of public or private with the method definitions. What seems to happen is that you just don't define methods you want to be private in your header file, which defines the class' public api. The - at the start of the definition indicates that this is an instance method, a + indicates a static method. The primary difference in the way methods are defined is when it comes to methods with multiple arguments, where you see this splitting of the method name. The only real purpose I can see of this is that if you write your method names and variables properly it helps the code read like plain english.</p>
<p>As for developing in XCode, so far I'm liking it. The built-in Interface Builder Gui tools are really helpful, especially when it comes to linking the controller to your views.  It's taking me a little while to find everything in the property inspectors, possibly because what I'm looking for isn't available for customisation but you never know. The in-line error and warning highlighting is really helpful as it makes it much easier to see where you've missed that semi-colon or curly brace. I think I'm really going to like the property synthesization (more on that once I've gone more in-depth with it) that allows the compiler to auto generate methods for you.</p>
<p>Developing for iOS is going to present me with some new challenges that I wouldn't normally have to contend with such as Memory Management, which is going to take some getting used to, but that's half the fun. So hopefully before too long I'll be posting about my new app that you can all go and buy and make me millions, (although based on how many readers I probably have  I might be lucky to make a pound!).  I promise it won't be a new fart app!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>183</wp:post_id>
		<wp:post_date>2011-08-26 11:06:38</wp:post_date>
		<wp:post_date_gmt>2011-08-26 11:06:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>objective-c-and-ios-development-taking-my-first-steps</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="applications"><![CDATA[applications]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="ios"><![CDATA[iOS]]></category>
		<category domain="post_tag" nicename="ios"><![CDATA[iOS]]></category>
		<category domain="post_tag" nicename="ipad"><![CDATA[iPad]]></category>
		<category domain="post_tag" nicename="iphone"><![CDATA[iPhone]]></category>
		<category domain="category" nicename="objective-c"><![CDATA[Objective-C]]></category>
		<category domain="post_tag" nicename="objective-c"><![CDATA[Objective-C]]></category>
		<category domain="post_tag" nicename="xcode"><![CDATA[xCode]]></category>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_wp_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_yourls</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_wp</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_bitly</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_clig</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_tweet_this</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Introducing Skeletor and Grayskull</title>
		<link>http://www.oinutter.co.uk/2011/10/20/introducing-skeletor-and-grayskull/</link>
		<pubDate>Thu, 20 Oct 2011 22:39:14 +0000</pubDate>
		<dc:creator>will</dc:creator>
		<guid isPermaLink="false">http://www.oinutter.co.uk/?p=220</guid>
		<description></description>
		<content:encoded><![CDATA[<p>So this month I've been playing with something new... again (I'm going through an experimental phase I guess). This month it was Ruby, or more specifically Ruby Gems. I've used Ruby a little in the Rakefiles I use for building my javascript projects but not really done any major work with it, until now.</p>
<p>I've been trying to find a nice simple solution for setting up my project skeletons quickly and easily. I'd thought of some sort of Git repository but then I'd end up with some faffy process involving multiple branches for different project types and having to clone a repository and then remove the git repository in the newly cloned folder and well, this didn't sound quick or easy. Eventually I hit on the idea of a command line ruby gem that could use templates defining a directory structure to set up what I needed. A quick search turned up nothing that seemed to do the job, the closest thing was <a title="Mr Bones Ruby Gem" href="https://rubygems.org/gems/bones" target="_blank">Mr Bones</a> but that seemed to be entirely for Ruby projects and the template skeleton wasn't easily customisable.  I was disappointed that it existed though as I wanted to name my gem bones but hey, how many things am I going to write that I can actually justify calling Skeletor?</p>
<p>So I started looking into what was involved in creating ruby gems. Initially I started of using <a title="Jeweler" href="https://github.com/technicalpickles/jeweler" target="_blank">Jeweler</a> but this created a lot of stuff I didn't really understand so I decided to strip everything back and just look at the structure of some gems I already used. My main source of reference was Sprockets but I also used Capistrano when trying to understand the command line aspect of the gem. These gave me a good source of reference for what was required in the various gem files.</p>
<p>For anyone who's not created gemfiles before the basic folder structure is  as follows:</p>
<ul>
<li>lib - contains 1 ruby file with the same name as the gem and a folder also named after the gem which contains all the code for the gem</li>
<li>bin - optional folder that contains the command line executable files for the gem</li>
<li>test - contains the unit test files</li>
<li>a Gemfile that contains the dependencies for the gem</li>
<li>a.gemspec file that contains the configuration details for building the gem</li>
<li>the usual README and LICENSE files in your choice of format</li>
</ul>
<p>I'm not going to go into the details of each of those files.  I'd say the best thing to do is to check out the source of some of the gems that you use and that will probably give you the best understanding of what's required. I'm using <a title="Thor" href="https://github.com/wycats/thor" target="_blank">Thor</a> for the command line interface and <a title="Hike" href="https://github.com/sstephenson/hike" target="_blank">Hike</a> to locate the files in the 2 possible load paths.</p>
<p>Skeletor supports defining a directory structure with files and folders. You can also specify include files which will be copied into the directory, either from a local file or a remote url, and define build tasks to be run after the directory is set up.</p>
<p>The code for Skeletor is actually pretty simple. Ruby's built in YAML.load function converts the template file into a Ruby Hash object which can then be looped through and there is a <a title="JSON implementation for Ruby" href="http://flori.github.com/json/" target="_blank">JSON</a> gem that works in the same way. The most complicated part was the validation code as I needed to be able to specify custom data types that a node could match any one of.  The only gem I could find for YAML validation was <a title="Kwalify" href="http://www.kuwata-lab.com/kwalify/" target="_blank">Kwalify</a> but that wasn't flexible enough for what I needed so I had to write my own. I eventually managed to get a working validation class that worked for what I wanted and decided to extract it into it's own gem so it could be used for other projects, and thus Grayskull was born.</p>
<p>Grayskull will validate JSON and YAML files against a given schema including matching against custom types. All the details for how to create the schema are at the GitHub page, as are the instructions on how to install and use it. The same goes for Skeletor. Grayskull is also using Thor for the command line as well as the aforementioned JSON gem for validation.</p>
<p>Check out the project pages for more info and the GitHub repositories for the source code and instructions.</p>
<p><a title="Skeletor" href="http://www.oinutter.co.uk/projects/skeletor/">Skeletor</a> | <a title="Skeletor on GitHub" href="http://github.com/OiNutter/skeletor" target="_blank">GitHub</a></p>
<p><a title="Grayskull" href="http://www.oinutter.co.uk/projects/grayskull/">Grayskull</a> | <a title="Grayskull on GitHub" href="http://github.com/OiNutter/grayskull" target="_blank">GitHub</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>220</wp:post_id>
		<wp:post_date>2011-10-20 22:39:14</wp:post_date>
		<wp:post_date_gmt>2011-10-20 22:39:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>introducing-skeletor-and-grayskull</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="gems"><![CDATA[Gems]]></category>
		<category domain="post_tag" nicename="gems-2"><![CDATA[gems]]></category>
		<category domain="post_tag" nicename="json"><![CDATA[json]]></category>
		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>
		<category domain="post_tag" nicename="ruby-2"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="skeleton"><![CDATA[skeleton]]></category>
		<category domain="post_tag" nicename="templates"><![CDATA[templates]]></category>
		<category domain="post_tag" nicename="validation"><![CDATA[validation]]></category>
		<category domain="post_tag" nicename="yaml"><![CDATA[yaml]]></category>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_wp_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_yourls</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_wp</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_bitly</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_clig</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_tweet_this</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
